# omg the battle setup definition file!
#
# This file defines encounter setups.
#
# The format for each "battle group" is as follows:
#
#TYPE   KEY CHANCE(opt)     SETUP_CALLFUNC(opt)
#ENEMY_1_NAME   ENEMY_1_X   ENEMY_1_Y   ENEMY_1_LEADERFLAG(opt)
#ENEMY_2_NAME   ENEMY_2_X   ENEMY_2_Y   ENEMY_2_LEADERFLAG(opt)
#ENEMY_N_NAME   ENEMY_N_X   ENEMY_N_Y   ENEMY_N_LEADERFLAG(opt)
# =END=
#
# TYPE is either "Area" or "Special".  The parser should error on an invalid token. 
#   If TYPE is "Special", then KEY must be unique (though this is currently not checked), 
#   and CHANCE is set to '1', regardless of what is given.
#
# ENEMY_NAME must be a valid enemy from the master_enemy[] array.  IsEnemy() and GetEnemy() from enemy.vc 
#   will help (assuming that the enemy datafile was parsed before this one).
#
# ENEMY_X and ENEMY_Y must be valid integers and are required.  If missing or invalid, error.
#
#
# The way that Area definitions work is that the total chance for an area is summed, and then that sum is used 
# as the upper limit on random battles for that area.  In the given examples below, A random pull from "Overworld_A" 
# will result in a Random Number Throw of 1-60, where 1-30 results in the first battle, 21-50 in the second, and 
# 51-60 in the third.  By the same token, a random pull from "Undersea_Cave" will result in a Random Number Throw of 
# 1-100, where a result of 1-50 will give the first battle of that set, 51-99 will give the second battle, and 100 
# will give the last one.
#
# Once everything has been parsed into whatever datastructures the implementor sees fit to make for this, the 
# following functions need to be made:
#
# // this function takes a Key.  If the key is to an area, calculate the area's randoms, and choose the 
# //   winning "battle group" entry in a global variable, for the rest of these functions to internally use.
# // if the key is for a special battle, set the global variable to it's lone index, no need to "roll dice".
# // if an invalid key is given, error.
# void InitBattleSetup( string key )
#
# // returns the number of enemies in the Battle Group set by InitBattleSetup()
# int GetBattleGroupCount()
#
# // returns the master_enemy[] index for the Nth enemy in the Battle Group set by InitBattleSetup() 
# int GetBattleGroupEnemy( int n ) 
#
# // returns the x coordinate for the Nth enemy in the Battle Group set by InitBattleSetup() 
# int GetBattleGroupEnemyX( int n ) 
#
# // returns the y coordinate for the Nth enemy in the Battle Group set by InitBattleSetup() 
# int GetBattleGroupEnemyY( int n ) 
#
# // returns true if the 'Leader' flag was set for Nth enemy in the Battle Group set by InitBattleSetup().  Otherwise False.  
# // Note, a battle group does not need a leader, and may have multiple leaders.
# int IsBattleGroupEnemyLeader( int n ) 
#
# //returns the given string for a battle group's optional setup callfunc (just returns "" if there is none)
# string BattleGroupSetupCallfunc()
#


Area    Overworld_A 300 IntroTest
Bunny       50  110
Bunny       95  180
Bunny       150 110
Evil_Bunny  95  135
=END=

Area    Overworld_A 30  -
Bunny       70  150 
Evil_Bunny  150 150 
Evil_Bunny  110 90 
=END=

   Area    Overworld_A 30  -
Bunny       110 110
 Bunny       150 110
Bunny       150 150
Evil_Carot  50  100 Leader
=END=

Area    Overworld_A 90  -
Bunny       110 110
Bunny       150 110
Bunny       150 150
Bunny       50  100 
=END=

Area   Undersea_Cave   50  -
Starfish   1   1
Dark_Tuna  17  34
Dark_Tuna  88  88
=END=

Area    Overworld_A 30  -
Drama_Clubber   10  100
Drama_Clubber   50  100
Drama_Clubber   150 100
=END=

Area    Overworld_A 30  -
Slime       20  100
Slime       85  100
Slime       150 100
=END=

Area    Overworld_A 60  -
Slime       20  100
Slime       85  100
Slime       150 100
Slime       20  160
Red_Slime   85  160 Leader
Slime       150 160 
=END=

#Special    Undersea_Boss   -   bs_special_setup_underseaboss
#Bert   10  10
#Sully  10  30
#Sancho 10  50  
#=END=
