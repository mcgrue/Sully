// menu_equip.vc for Sully www.verge-rpg.com
// Zip 05/09/2004
// Last update 06/10/2004

//        ----------------
//       Equip Menu
//        ----------------

void MenuControlEquip()
{
	//Menu2ArrowSetSounds( ,"MenuPageTurn" );
	Menu2ArrowSetSounds( "MenuHappyBeep","MenuPageTurn" );
	MenuControlTwoArrows("menu_sub", MAX_EQUIP_SLOTS, "menu_cast", PartySize());
	if (MenuConfirm())
	{
		// If UNEQUIP_WEAPON_OK is set to 0, preventing the player from removing
		// his weapon, and he's trying to open the weapon equip menu, AND he has
		// no weapons in inventory, buzz and do nothing. 
		if (menu_sub == SLOT_RHAND && !UNEQUIP_WEAPON_OK) // If opening the RHAND slot menu and you're not allowed to unequip weapons.
		{
			// if there are no weapons in inventory, buzz and do nothing. Otherwise, continue as normal.
			if (EquCountBySlot(SLOT_RHAND) <= 0) 
			{
				MenuAngryBuzz(); 
				return;
			}
		}
		// ...and this block works the same as the one above, but for armor and the
		// UNEQUIP_ARMOR_OK define.
		else if (menu_sub == SLOT_BODY && !UNEQUIP_ARMOR_OK) // If opening the BODY slot menu and you're not allowed to unequip armor.
		{
			// if there is no arnir in inventory, buzz and do nothing. Otherwise, continue as normal.
			if (EquCountBySlot(SLOT_BODY) <= 0) 
			{
				MenuAngryBuzz(); 
				return;
			}
		}
		
		MenuHappyBeep();
		menu_item = 0;
		menu_idx = MenuGet("EquipSub");
	}
	if (MenuCancel())
	{
		Menu2ArrowSetSounds( "","" );
		MenuHappyBeep();
		menu_sub = 0;
		menu_idx = MenuGet("Cast");
	}
}

void MenuControlEquipSub()
{
	Menu1ArrowSetSounds("MenuHappyBeep");
	
	// If not allowed to dequip...
	if ( (menu_sub == SLOT_RHAND && !UNEQUIP_WEAPON_OK) || (menu_sub == SLOT_BODY && !UNEQUIP_ARMOR_OK) ) 
	{
		// Just make the list with no (none) option at the bottom
		menu_item = MenuControlArrows(menu_item, EquCountBySlot(menu_sub));
	}
	// Otherwise, add the dequip option to the end of the list
	else menu_item = MenuControlArrows(menu_item, EquCountBySlot(menu_sub) + 1);
	if (menu_start + 4 < menu_item) menu_start = menu_item - 4;
	else if (menu_start > menu_item) menu_start = menu_item;
	if (MenuConfirm())
	{
		if (menu_item == EquCountBySlot(menu_sub))
		{			if (HasEquipment(party[menu_cast], menu_sub))
			{
				DequipItemI(party[menu_cast], menu_sub);
				MenuForceEquip();
			}
			
			MenuHappyBeep();
			menu_item = 0-1;
			menu_idx = MenuGet("Equip");
		}
		else if (CanEquipI(party[menu_cast], GetEquBySlot(menu_sub, menu_item)))
		{
			MenuForceEquip();
			EquipItemI(party[menu_cast], GetEquBySlot(menu_sub, menu_item), menu_sub);
			MenuMinibox(master_items[master_cast[party[menu_cast]].equipment[menu_sub]].name+" equipped!", "MenuDrawEquip");
			menu_item = 0-1;
			menu_idx = MenuGet("Equip");
		}
		else MenuAngryBuzz();
	}
	if (MenuCancel())
	{
		MenuHappyBeep();
		
		menu_item = 0-1;
		menu_start = 0;
		
		Menu1ArrowSetSounds("");
		
		menu_idx = MenuGet("Equip");
	}
}

void MenuDrawEquip()
{
	int i;
	MenuBlitRight(0, menu_option);
	MenuDrawBackground(MENU_A_X1, MENU_A_Y1, MENU_A_X2, MENU_A_Y2, MenuIsActive("Equip"));
	PrintRight(220, 15, screen, menu_font[0], "Equip");
	MenuBlitCast(menu_cast, 0, 0);
	for (i = 0; i < MAX_STATS; i++)
	{		
		MenuPrintStat(MENU_CAST_X, MENU_CAST_Y, i, 0, GetRealStat(party[menu_cast], i));
	}

	Line(20, 110, 220, 110, menu_colour[2], screen);

	for (i = 0; i < MAX_EQUIP_SLOTS; i++)
	{
		PrintString(25, 115 + (15 * i),
		 screen, menu_font[0], GetSlotName(i));
		PrintString(75, 115 + (15 * i),
		 screen, menu_font[0], master_items[master_cast[party[menu_cast]].equipment[i]].name);
	}
	PrintString(15, 115 + (15 * menu_sub), screen, menu_font[0], ">");


	if (HasEquipment(party[menu_cast], menu_sub)) MenuPrintDesc(menu_font[0], master_items[master_cast[party[menu_cast]].equipment[menu_sub]].desc, 180);
	else MenuPrintDesc(menu_font[0], "No item", 180);
	Line(20, 225 - (2 * (menu_fonth + 2)), 220, 225 - (2 * (menu_fonth + 2)), menu_colour[2], screen);
}


void MenuDrawEquipSub()
{
	int i, equip, equ_count;
	int can_dequip; // 1 if you can dequip the current thing, 0 otherwise.
	if ( (menu_sub == SLOT_RHAND && !UNEQUIP_WEAPON_OK) || (menu_sub == SLOT_BODY && !UNEQUIP_ARMOR_OK) ) can_dequip = 0;
	else can_dequip = 1;
	MenuBlitRight(0, menu_option);
	MenuDrawBackground(MENU_A_X1, MENU_A_Y1, MENU_A_X2, MENU_A_Y2, MenuIsActive("EquipSub"));
	PrintRight(220, 15, screen, menu_font[0], "Equip");
	MenuBlitCast(menu_cast, 0, 0);
	Line(20, 110, 220, 110, menu_colour[2], screen);
	PrintString(25, 115, screen, menu_font[0], GetSlotName(menu_sub));
	PrintString(75, 115, screen, menu_font[0], master_items[master_cast[party[menu_cast]].equipment[menu_sub]].name);

	equ_count = EquCountBySlot(menu_sub);

	if (menu_item = equ_count) // Unequip option (last in list) selected
	{
		for (i = 0; i < MAX_STATS; i++)
		{	
			equip = GetMyStatPretendDequipI(party[menu_cast], menu_sub, i);
			MenuPrintStat(MENU_CAST_X, MENU_CAST_Y, i, MenuEquipFont(equip, GetRawStat(party[menu_cast], i)), equip);
		}
	}
	else if (CanEquipI(party[menu_cast], GetEquBySlot(menu_sub, menu_item)))
	{
		for (i = 0; i < MAX_STATS; i++)
		{
			equip = GetMyStatPretendEquipI(party[menu_cast], GetEquBySlot(menu_sub, menu_item), menu_sub, i);
			MenuPrintStat(MENU_CAST_X, MENU_CAST_Y, i, MenuEquipFont(equip, GetRawStat(party[menu_cast], i)), equip);
		}
	}
	else
	{
		for (i = 0; i < MAX_STATS; i++)
		{
			MenuPrintStat(MENU_CAST_X, MENU_CAST_Y, i, 0, GetRawStat(party[menu_cast], i));
		}
	}

	if (menu_item < equ_count) MenuPrintDesc(menu_font[0], master_items[GetEquBySlot(menu_sub, menu_item)].desc, 180);
	else MenuPrintDesc(menu_font[0], "No item", 180);
	MenuDrawSubWindow(20, 130, 220, 225 - (2 * (menu_fonth + 2)), menu_item, menu_fonth + 2, equ_count + 1, menu_start, 3);

	for (i = menu_start; i < equ_count; i++)
	{
		if (CanEquipI(party[menu_cast], GetEquBySlot(menu_sub, i))) equip = 0;
		else equip = 1;
		PrintString(55, 133 + ((menu_fonth + 2) * (i - menu_start)), screen, menu_font[equip], master_items[GetEquBySlot(menu_sub, i)].name);
		PrintRight(205, 133 + ((menu_fonth + 2) * (i - menu_start)), screen, menu_font[equip], str(GetEquQuantBySlot(menu_sub, i)));
		equip = icon_get(master_items[GetEquBySlot(menu_sub, i)].icon);
		if (i == menu_item) TBlit(35, 131 + ((menu_fonth + 2) * (i - menu_start)), equip, screen);
		else TScaleBlit(35, 135 + ((menu_fonth + 2) * (i - menu_start)), 8, 8, equip, screen);
		FreeImage(equip);
		if (menu_start + 4 <= i) i = equ_count + 1;
	}
	if (i == equ_count) // if the last item visible is the list end
	{
		// If unable to dequip, omit that option.
		if (!can_dequip) return; // end list here
		// Otherwise, print the dequip option.
		PrintString(55, 133 + ((menu_fonth + 2) * 
		(i - menu_start)), screen, menu_font[0], "(none)"); // if near end
	}
}

// Draws a sub window with vertical scroll bar and cursor, but draws none of the contents
// This function is a god amoungst men
void MenuDrawSubWindow(int x1, int y1, int x2, int y2, int entry_current, int entry_size, int entry_total, int entry_start, int entry_mod)
// Pass: Dimensions of box by top left and bottom right coords, current selected entry (pass negative for none),
//			height of one entry, total number of entries, entry at top of window, and size modifier
// No error checking, and can display strangely if odd values are passed
{

/*
log( 
	str(entry_current)	+ "," + 
	str(entry_size)		+ "," + 
	str(entry_total)	+ "," + 
	str(entry_start)	+ "," +
	str(entry_mod)
);
*/


	int ydiff = y2 - y1 - 8;
	int entry_fit = (y2 - y1) / entry_size;
	if (entry_total < entry_fit)  entry_fit = entry_total;
	Rect(x1, y1, x2, y2, menu_colour[2], screen);
	Rect(x2 - 10, y1 + 2, x2 - 2, y2 - 2, menu_colour[2], screen);
	RectFill(x2 - 8, y1 + 4 + ((ydiff * entry_start) / entry_total),
	 x2 - 4, y1 + 4 + ((ydiff * (entry_fit + entry_start)) / entry_total), menu_colour[2], screen);
	if (entry_current >= 0)
	{
		Rect(x1 + 4, y1 + 4 + (entry_size * (entry_current - entry_start)), x1 + 10, y1 + entry_size  - entry_mod + (entry_size * (entry_current - entry_start)), menu_colour[2], screen);
		RectFill(x1 + 6, y1 + 6 + (entry_size * (entry_current - entry_start)), x1 + 8, y1 + entry_size - entry_mod - 2 + (entry_size * (entry_current - entry_start)), menu_colour[2], screen);
	}
}

// Decides what colour font to use based on comparision of current and new values
int MenuEquipFont(int new, int current)
{
	//if both values are less than or equal to 0, there is no effective change.  Keep them white.
	if( new <= 0 && current <= 0  )	return 0;
	
	if (new > current) return 2; // Higher value green font
	else if (new < current) return 3; // Lower value red font
	return 0; // Same value white font
}

// Displays a stat on the screen based on type
void MenuPrintStat(int x, int y, int stat, int font, int value)
{
	// Current HP/MP aren't stats in the same sense as the maximums, so they're not drawn by
	// this function. They get drawn by a separate function, MenuBlitCast in menu_system.vc.
	// It's kind of weird, but that's how Zip coded it.
	if (stat == STAT_MAX_HP) // HP gets drawn in its own place	
	{		
		PrintRight(x + 115 + TextWidth(menu_font[0], "MP:000/000"), y + 10, screen, menu_font[0], str(value));
		return;
	}
	if (stat == STAT_MAX_MP) // MP gets drawn in its own place	
	{		
		PrintRight(x + 115 + TextWidth(menu_font[0], "MP:000/000"), y + 20, screen, menu_font[0], str(value));
		return;
	}	
	// Other stats get printed in order in a two-line block. 
	int xpos = stat / 2; // This ensures that the stats are printed across two lines.
	int ypos = stat % 2; // This ensures that even-numbered stats go on the top row while odd-numbered stats go on the bottom	
	PrintString(x + (32 * xpos) - 32, y + 35 + (24 * ypos), screen, menu_font[font], GetStatName(stat)); // print name
	PrintString(x + (32 * xpos) - 32, y + 45 + (24 * ypos), screen, menu_font[font], str(value));  // print value
}