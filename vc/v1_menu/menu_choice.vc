// REDUNDANT FILE
// menu_choice.vc for Sully www.verge-rpg.com
// Zip 05/09/2004
// Last update 06/10/2004


//        -----------------
//       Choice Box
//        -----------------
// Some different versions as they are all horrible
int cursor_pos;
string MenuInputBox( string s )
{
    String delim = chr(10); //was previously "|"
    
    int max_lines = 5;
    string inputtext, wrapinput;
    
    inputtext = s;
    
    int linenum, i, start, current;
    int wid = 180;
    int high = 80;
    int xpos = (ImageWidth(screen) / 2) - (wid / 2);
    int ypos = (ImageHeight(screen) / 2) - (high / 2);
    int mini_hold = menu_idx;
    menu_idx = 1000000; // To make a grue happy
    
    UnPress(UNPRESS_ALL);

    key[SCAN_ENTER] = 0;
    
    
    lastpressed = 0;
    cursor_pos = 0;
    while(cursor_pos > 0-1)
    {
        MenuBackGroundDraw(); // Draw universal things
        if (IsInMenu()) CallFunction(master_menus[mini_hold].draw_func);
        V1_Box(xpos, ypos, wid, high);
        wrapinput = WrapText(menu_font[1], inputtext, wid - 30);
        linenum = TokenCount(wrapinput, delim);
        current = GetCurrentToken(wrapinput, delim, cursor_pos);
        if (linenum == 0) linenum = 1;
        else if (current > max_lines - 2) start = current - max_lines + 1;
        else start = 0;
        MenuDrawSubWindow(xpos + 8, ypos + 8, xpos + wid - 8, ypos + high - 8, 0-1, menu_fonth, linenum, start, 0);
        for (i = start; i < linenum; i++)
        {
            PrintString(xpos + 12, ypos + 12 + ((i - start) * menu_fonth), screen, menu_font[0], GetToken(wrapinput, delim, i));
            if (i >= start + 4) i = linenum + 1;
        }
        BlitCursor(xpos + 12, ypos + 12 + ((current - start) * menu_fonth), menu_font[0], cursor_pos - GetTokenPos(wrapinput, delim, current, 0), GetToken(wrapinput, delim, current));
        ShowPage();
        inputtext = InputReadString(inputtext, 1000);
        if (MenuCancel()) return "";
    }
    return inputtext;
}

void BlitCursor(int x, int y, int fnt, int pos, string text)
{
    if (systemtime % 100 > 50)
    {
        Line(x+TextWidth(fnt, left(text, pos)), y, x+TextWidth(fnt, left(text, pos)), y+FontHeight(fnt)-1, rgb(255, 255, 255), screen);
        Line(x+TextWidth(fnt, left(text, pos))+1, y, x+TextWidth(fnt, left(text, pos))+1, y+FontHeight(fnt)-1, 0, screen);
    }

}

string InputReadString(string current_string, int max_length)
// Pass: Variable name of string, Maximum allow characters
// Returns: The string after input
// Requires: Global int cursor_pos
{

    UpdateControls(); // Just In Case
    
    if(key[SCAN_BACKSP]) // Delete chr before cursor
    {
        
        lastpressed = 0;
        
        key[SCAN_BACKSP] = 0;
        
        if (cursor_pos > 0) // If there is a chr before the cursor
        {
            max_length = len(current_string) - cursor_pos;
            cursor_pos--;
            return left(current_string, cursor_pos) + right(current_string, max_length);
        }
    }
    else if(key[SCAN_DEL] || key[211]) // Delete chr after cursor
    {
        lastpressed = 0;
        key[SCAN_DEL] = 0; // Num pad DEL key
        key[211] = 0; // Delete key
        if (cursor_pos < len(current_string)) // If there is a chr after the cursor
        {
            max_length = len(current_string) - cursor_pos - 1;
            return left(current_string, cursor_pos) + right(current_string, max_length);
        }
    }
    else if(key[SCAN_ENTER]) // Input completed
    {
        lastpressed = 0;
        if(key[SCAN_RSHIFT] || key[SCAN_LSHIFT])
        {
            key[SCAN_ENTER] = 0;
            max_length = len(current_string) - cursor_pos;
            return left(current_string, cursor_pos) + "|" + right(current_string, max_length);
        }
        else cursor_pos = 0-1; // Check for 0-1 as a confirm of string input
    }
    else if(key[SCAN_TAB]) // Move to next input
    {
        key[SCAN_TAB] = 0;
        cursor_pos = 0-1; // Check for 0-1 as a input move
    }
    else if(key[SCAN_UP]) // Up to start of string
    {
        key[SCAN_UP] = 0;
        cursor_pos = 0;
    }
    else if(key[SCAN_DOWN]) // Down to end of string
    {
        key[SCAN_DOWN] = 0;
        cursor_pos = len(current_string);
    }
    else if(key[SCAN_LEFT]) // Move cursor left one space
    {
        key[SCAN_LEFT] = 0;
        if (cursor_pos > 0) cursor_pos--;
    }
    else if(key[SCAN_RIGHT]) // Move cursor right one space
    {
        key[SCAN_RIGHT] = 0;
        if (cursor_pos < len(current_string)) cursor_pos++;
    }
    else if(lastpressed)
    {
        lastpressed = 0;
        if(key[SCAN_V]) // Move cursor right one space
        {
            if (key[SCAN_CTRL] && len(clipboard.text))
            {
                key[SCAN_V] = 0;
                cursor_pos = len(clipboard.text);
                if (cursor_pos > max_length)
                {
                    cursor_pos = max_length;
                    return left(clipboard.text, max_length);
                }
                else return clipboard.text;
            }
        }
        if (len(chr(lastkey)) && len(current_string) < max_length) // If it's a string-able chr, and string is not too long
        {
            max_length = len(current_string) - cursor_pos;
            cursor_pos++;
            return left(current_string, cursor_pos - 1) + chr(lastkey) + right(current_string, max_length);
        }
    }

    lastpressed = 0;
    return current_string;
}


int GetCurrentToken(string teststr, string tokens, int pos)
{
    int i, t;
    int last = 0;
    int count = 0;
    if (pos == 0) return 0;
    for (i = 0; i < pos; i++)
    {
        if (chrstrq(mid(teststr, i, 1), tokens))
        {
            if (!last)
            {
                count++;
                last = 1;
            }
        }
        else if (last)
        {
            last = 0;
        }
    }
    return count;
}

int chrstrq(string achr, string astr)
{
    int i;
    int alen = len(astr);
    for (i = 0; i < alen; i++)
    {
        if (!strcmp(achr, mid(astr, i, 1))) return 1;
    }
    return 0;
}

// Returns number of occurrences of one string within another
int strstr(string asub, string astr)
{
    int i;
    int count = 0;
    int al = len(asub);
    int alen = len(astr);
    for (i = 0; i < alen; i++)
    {
        if (!strcmp(asub, mid(astr, i, al))) count++;
    }
    return count;
}

int strstrp(string asub, string astr, int start)
{
    int i;
    int count = 0;
    int al = len(asub);
    int alen = len(astr);
    for (i = start; i < alen; i++)
    {
        if (!strcmp(asub, mid(astr, i, al))) return i;
    }
    return alen;
}


string strrep(string sub, string rep, string source)
{
    int i;
    string dest = "";
    int count = 0;
    int sublen = len(sub);
    int sourcelen = len(source);
    for (i = 0; i < sourcelen; i++)
    {
        if (!strcmp(sub, mid(source, i, sublen)))
        {
            dest = dest + mid(source, i - count, count) + rep;
            count = 0;
            i += sublen - 1;
        }
        else count++;
    }
    return dest + right(source, count);
}

// Basic ugly choice box. Pants
int MenuChoiceBox(string question, string choices)
{
    int i;
    int count = TokenCount(choices, "|");
    if (count > 4) ErrorHandler("Moar than 4 options passed to the choicebox. This will cause graphical oddness");
    menu_item = 0;
    while(!MenuConfirm())
    {
        MenuBackGroundDraw(); // Draw universal things

        menu_item = MenuControlArrows(menu_item, count);
        _MenuDrawBackground(5, 185, 315, 235, 1);
        PrintString(12, 192, screen, v1rpg_LargeFont, question);
        for(i = 0; i < count; i++)
        {
            PrintString((i / 2) * 150 + 20, (i % 2) * 14 + 206, screen, v1rpg_LargeFont, GetToken(choices, "|", i));
        }
        PrintString((menu_item / 2) * 150 + 10, (menu_item % 2) * 14 + 206, screen, v1rpg_LargeFont, ">");
        ShowPage();
    }
    return menu_item;
}

// Expand-to-fit choice box
int MenuChoiceBoxVar(string question, string choices)
{
    int i;
    int count = TokenCount(choices, "|");
    if (count > 6) ErrorHandler("Moar than 6 options passed to the choicebox. This will cause graphical oddness");
    menu_item = 0;
    while(!MenuConfirm())
    {
        MenuBackGroundDraw(); // Draw universal things

        menu_item = MenuControlArrows(menu_item, count);
        _MenuDrawBackground(5, 215 - (14 * count), 315, 235, 1);
        PrintString(12, 220 - (14 * count), screen, v1rpg_LargeFont, question);
        for(i = 0; i < count; i++)
        {
            PrintString(20, 232 - ((count - i)  * 14), screen, v1rpg_LargeFont, GetToken(choices, "|", i));
        }
        PrintString(10, 232 - ((count - menu_item)  * 14), screen, v1rpg_LargeFont, ">");
        ShowPage();
    }
    return menu_item;
}

// Uses subwindow, but still doesn't fit in skimpy textbox space well
int MenuChoiceBoxWin(string question, string choices)
{
    int i;
    int count = TokenCount(choices, "|");
    menu_item = 0;
    while(!MenuConfirm())
    {
        MenuBackGroundDraw(); // Draw universal things

        menu_item = MenuControlArrows(menu_item, count);
        if (menu_start + 1 < menu_item) menu_start = menu_item - 1;
        else if (menu_start > menu_item) menu_start = menu_item;
        _MenuDrawBackground(5, 185, 315, 235, 1);
        MenuDrawSubWindow(10, 200, 310, 230, menu_item, 14, count, menu_start, 4);
        PrintString(12, 190, screen, v1rpg_LargeFont, question);
        for(i = menu_start; i < count; i++)
        {
            PrintString(25, (i - menu_start) * 14  + 204, screen, v1rpg_LargeFont, GetToken(choices, "|", i));
            if (menu_start + 1 <= i) i = count + 1;
        }
        ShowPage();
    }
    return menu_item;
}