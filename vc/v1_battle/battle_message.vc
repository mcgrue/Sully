int battlemessagebox; // box handle
int battlemessage_deathtime; // systime when this message will disappear. set to BMSG_INDEFINITE_DURATION to make permanent.
int battlemessage_loc; // x coordinate of the actual x-position of this box (as opposed to BMSG_LEFT_X, which is for only the fullscreen case)
int battlemessage_skiptime; // The time after which this message can be skipped with the confirm button. Set to BMSG_INDEFINITE_DURATION if unskippable

#define BMSG_FORMAT_FULL 0 // span most of the screen regardless of message length
#define BMSG_FORMAT_MINIMAL 0 // take up only what space is needed

#define BMSG_TOP_Y 216
#define BMSG_LEFT_X 5       // leftmost edge when message box is full screen size
#define BMSG_RIGHT_X 315    // rightmost edge when message box is full screen size
#define BMSG_HEIGHT FontHeight(v1rpg_LargeFont)

#define BMSG_INDEFINITE_DURATION -1 // set lifetime to this value for a battle message that lasts until removed.
#define BMSG_TYPICAL_DURATION 250 
#define BMSG_TIME_BEFORE_SKIPPABLE 25 // time before you can skip a skippable battle message by pressing confirm

int base_message_image = 0; // this holds the full-sized base image for the message box
int message_image = 0; // and this holds the cropped subset that needs to be shown

struct queued_message {
	int fullwidth, centred, skippable, lifetime;
	string message;
}

#define MAX_QUEUED_MESSAGES 20
queued_message battle_message_queue[MAX_QUEUED_MESSAGES];

int next_queued_message;
int messages_queued;


void DrawBattleMessageBox() {
    SetTargetBox(battlemessagebox);
    if( BattleMessageExists() ) { 
    	DrawBox(battlemessage_loc, BMSG_TOP_Y, screen);        
        if (battlemessage_deathtime != BMSG_INDEFINITE_DURATION 
            && systemtime >= battlemessage_deathtime) {
            SkipBattleMessage(); // time's up; move to the next message in the queue, if any
        }
        else if (MenuConfirm() && battlemessage_skiptime != BMSG_INDEFINITE_DURATION 
            && systemtime >= battlemessage_skiptime) {
            SkipBattleMessage(); // skipped; move to the next message in the queue, if any
        }        
    }    
}

// Initializes the battle message box, reserving its handle. Be sure to use DestroyBattleMessage when the battle is over.
void PrepBattleMessageBox() {   
    battlemessagebox = NewBox( "BoxLib_V1Border", "BoxLib_V1BG" );
    SetTargetBox(battlemessagebox);
    SetBoxBordersize(5,5,5,5);
    battlemessage_deathtime = BMSG_INDEFINITE_DURATION;
    battlemessage_skiptime = BMSG_INDEFINITE_DURATION; 
    SetBoxPadding(2,0,2,2);
    SetBoxColor( 0, rgb(0, 0, 0) );
    SetBoxColor( 1, rgb(112, 112, 112) );
    SetBoxColor( 2, rgb(144, 144, 144) );
    SetBoxColor( 3, rgb(0, 0, 255) );   
    base_message_image = NewImage(BMSG_RIGHT_X - BMSG_LEFT_X - GetBoxLeftOffset() - GetBoxRightOffset(), BMSG_HEIGHT);
    ref_battlemessage = mcg_add_complex( "DrawBattleMessageBox", -1 );
    EmptyBattleMessageQueue();
}

// This function changes (or initially sets) the battle message, emptying the queue in the
// process. To queue a message, use QueueBattleMessage instead.
// Fullwidth determines whether the box covers the full screen or just the 
// Centred determines whether the text within the box (rather than the box itself) is centred 
// or left-justified, and only matters when fullwidth is true.
// Skippable controlls whether the message can be dismissed by pressing the confirm button.
// Lifetime defines the maximum lifetime of the message in centiseconds, after which
// it will destroy itself. Set to BMSG_INDEFINITE_DURATION to make a permanent message.
void SetBattleMessage(string message, int fullwidth, int centred, int skippable, int lifetime) {
	_battleMessageSetup(message, fullwidth, centred, skippable, lifetime, TRUE);
}

// This function is identical to SetBattleMessage save that it queues the message if there's
// a message already being displayed. It currently delivers an error if the queue is full,
// but you can easily cut that part out if it causes trouble.
void QueueBattleMessage(string message, int fullwidth, int centred, int skippable, int lifetime) {
	int next_free;
	if (!BattleMessageExists()) SetBattleMessage(message, fullwidth, centred, skippable, lifetime);
	else if (messages_queued >= MAX_QUEUED_MESSAGES) { 
		ErrorHandler( 
			"Error in QueueBattleMessage: The message queue is full. You will need to " +
			"increase MAX_QUEUED_MESSAGES (currently " + str(MAX_QUEUED_MESSAGES) + ").");
	}
	else {
		next_free = (next_queued_message + messages_queued) % MAX_QUEUED_MESSAGES; // we wrap around at the end of the queue
		battle_message_queue[next_free].fullwidth = fullwidth;
		battle_message_queue[next_free].centred = centred;
		battle_message_queue[next_free].skippable = skippable;
		battle_message_queue[next_free].lifetime = lifetime;
		battle_message_queue[next_free].message = message;
		messages_queued++;		
	}
}

// This stops the current battle message from displaying, and moves on to the next in the queue.
void SkipBattleMessage() {
	_killCurrentMessage();
    _advanceBattleMessageQueue();
}

// This stops the battle message from displaying, and clears out the message queue.
void ClearBattleMessage() {
    _killCurrentMessage();
    EmptyBattleMessageQueue();	
}

// This frees the resources allocated to battle messages. Only use it at the end of battle.
// To simply stop a message from displaying within battle, use ClearBattleMessage().
void DestroyBattleMessage() {
    if (ImageValid(message_image)) FreeImage(message_image);
    if (ImageValid(base_message_image)) FreeImage(base_message_image);
    
    battlemessage_loc = 0;
    battlemessage_deathtime = BMSG_INDEFINITE_DURATION; 
    battlemessage_skiptime = BMSG_INDEFINITE_DURATION; 
	EmptyBattleMessageQueue();
    
	SetTargetBox(battlemessagebox);
	FreeBox(FALSE);
}

int BattleMessageExists() { return (ImageValid(master_box[battlemessagebox].im_content)); }

// As the name implies, this empties the message queue. However, it does NOT clear the
// message currently being displayed, if any.
void EmptyBattleMessageQueue() { messages_queued = 0; }


// ----------------------------------------------

// Sets up the battle message, as per the explanation given for SetBattleMessage,
// The only extra parameter is clear_queue, which is TRUE when calling SetBattleMessage.
void _battleMessageSetup(string message, int fullwidth, int centred, int skippable, int lifetime, int clear_queue) {
    int message_h = BMSG_HEIGHT, message_w;
    
    if (fullwidth) message_w = ImageWidth(base_message_image);
    else message_w = max(1,TextWidth(v1rpg_LargeFont, message));
    
    if (ImageValid(message_image)) FreeImage(message_image);
    message_image = ImageShell(0,0,message_w,message_h,base_message_image);
    
    RectFill(0,0,message_w, message_h, transcolor, message_image);
    if (fullwidth && !centred) PrintString(0, 0, message_image, v1rpg_LargeFont, message);
    else PrintCenter(message_w/2, 0, message_image, v1rpg_LargeFont, message);
    
    SetTargetBox(battlemessagebox);
    SetBoxContent(message_image);
        
    if (fullwidth) battlemessage_loc = BMSG_LEFT_X;
    else battlemessage_loc = ((ImageWidth(screen)-message_w)/2) - GetBoxLeftOffset(); 
    	        
    if (lifetime == BMSG_INDEFINITE_DURATION) battlemessage_deathtime = BMSG_INDEFINITE_DURATION;
    else battlemessage_deathtime = systemtime + lifetime;

	if (!skippable) battlemessage_skiptime = BMSG_INDEFINITE_DURATION;
	else battlemessage_skiptime = systemtime + BMSG_TIME_BEFORE_SKIPPABLE;
    
	if (clear_queue) EmptyBattleMessageQueue();    
}

// Removes the message currently being displayed. Don't call this directly -- use either
// SkipBattleMessgae or ClearBattleMessage, depending on whether you want the queue
// intact or not.
void _killCurrentMessage() {
    battlemessage_loc = 0;
    battlemessage_deathtime = BMSG_INDEFINITE_DURATION; 
    battlemessage_skiptime = BMSG_INDEFINITE_DURATION; 

	if (ImageValid(message_image)) FreeImage(message_image);
	SetTargetBox(battlemessagebox);	
    SetBoxContent(-1);	
}

// Move on to the next queued message, if any. If the queue is empty, does nothing.
// Note that this does NOT remove the current message, so if you want to do that,
// use SkipBattleMessage instead to prevent resource leakage.
void _advanceBattleMessageQueue() {
	if (messages_queued > 0) {
		messages_queued--;				
		_battleMessageSetup(battle_message_queue[next_queued_message].message, battle_message_queue[next_queued_message].fullwidth, battle_message_queue[next_queued_message].centred, battle_message_queue[next_queued_message].skippable, battle_message_queue[next_queued_message].lifetime, FALSE); // I would eat a horse turd to have name completion right now
		next_queued_message = (next_queued_message + 1) % MAX_QUEUED_MESSAGES; // the queue wraps around at the end
	}
}
