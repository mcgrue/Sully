/// The queue for battle actions.   
/// Hopefully generic enough for adaptability to both realtime and turnbased systems
///
/// McGrue, 2005.09.11 (NEVAR FORGET)

#define BACT_DELAY  0   ///specifies that a battle_queue_entry will trigger AI for enemies or
                        ///a battle action menu shold appear for allies.

#define BACT_CHARGE 1   ///specifies that when this triggers, the battle entity in question 
                        ///should fire off some sort of action
                
#define BACT_GUARD  2   ///Guard actions on the stack.  



#define PARTY_NULL  -1  ///specifies that the batent_ref in this battle_queue_entry is not a party at all, 
                        /// and should be checked for special processing.
                
#define PARTY_ALLY  0   ///specifies that the batent_ref in this battle_queue_entry is in the ally party.
#define PARTY_ENEMY 1   ///specifies that the batent_ref in this battle_queue_entry is in the enemy party.

#define MAX_BATTLE_QUEUE_ENTRIES            64  ///the maximum number of battle queue entries.  
#define MAX_BATTLE_QUEUE_ENTRIES_PLUS_ONE   65  ///A stupid hack so we have a 'temp' slot for shuffling things around.  

/// The maximum delay in this system
#define MAX_BATTLE_DELAY 300

/// Strictness mode.  If enabled, only one entry may exist per any given batent_ref index.
#define BATTLE_QUEUE_STRICT 0


/// how strong a "defend" action defends for, %-wise
#define STANDARD_DEFEND_POWER 50

struct battle_queue_entry
{
    int time;       /// the current time to go until this action fires.
    int post_time;  /// the amount of time to add to the stack after it executes as a BACT_DELAY if it was a BACT_CHARGE
    
    int batent_ref; /// the battle system index to the battle entity this action is assigned to.
    int action;     /// the type of action this entry represents.  In the sully system, either 
                    /// BACT_DELAY or BACT_CHARGE
    int batent_party;   /// the party reference
    string data;    /// some misc system-specific data to tie into this entry.
}

/// The battle queue
battle_queue_entry battle_queue[MAX_BATTLE_QUEUE_ENTRIES_PLUS_ONE];

/// the number of entries presently in the battle queue.
int battle_queue_count;

/// switches the contents of two battle queue slots.
/// used a lot in the sort function.
///
/// errors if either index is invalid, and returns.
void switch_battle_queue_slots( int idx_a, int idx_b )
{
    if( idx_a < 0 || idx_a >= MAX_BATTLE_QUEUE_ENTRIES )
    {
        ErrorHandler( "switch_battle_queue_slots(): idx_a was an invalid value ("+str(idx_a)+"), expecting 0-"+str(MAX_BATTLE_QUEUE_ENTRIES-1) );
        return;
    }
    
    if( idx_a < 0 || idx_a >= MAX_BATTLE_QUEUE_ENTRIES )
    {
        ErrorHandler( "switch_battle_queue_slots(): idx_a was an invalid value ("+str(idx_a)+"), expecting 0-"+str(MAX_BATTLE_QUEUE_ENTRIES-1) );
        return;
    }
    
    int tmp_idx = MAX_BATTLE_QUEUE_ENTRIES;
    
    battle_queue[tmp_idx].time          = battle_queue[idx_a].time;
    battle_queue[tmp_idx].post_time     = battle_queue[idx_a].post_time;
    battle_queue[tmp_idx].batent_ref    = battle_queue[idx_a].batent_ref;
    battle_queue[tmp_idx].action        = battle_queue[idx_a].action;
    battle_queue[tmp_idx].data          = battle_queue[idx_a].data;
    battle_queue[tmp_idx].batent_party  = battle_queue[idx_a].batent_party;
    
    battle_queue[idx_a].time            = battle_queue[idx_b].time;
    battle_queue[idx_a].post_time       = battle_queue[idx_b].post_time;
    battle_queue[idx_a].batent_ref      = battle_queue[idx_b].batent_ref;
    battle_queue[idx_a].action          = battle_queue[idx_b].action;
    battle_queue[idx_a].data            = battle_queue[idx_b].data;
    battle_queue[idx_a].batent_party    = battle_queue[idx_b].batent_party;
    
    battle_queue[idx_b].time            = battle_queue[tmp_idx].time;
    battle_queue[idx_b].post_time       = battle_queue[tmp_idx].post_time;
    battle_queue[idx_b].batent_ref      = battle_queue[tmp_idx].batent_ref;
    battle_queue[idx_b].action          = battle_queue[tmp_idx].action;
    battle_queue[idx_b].data            = battle_queue[tmp_idx].data;   
    battle_queue[idx_b].batent_party    = battle_queue[tmp_idx].batent_party;   
}

void clean_battle_queue_slot(int i) {
    battle_queue[i].time          = -1;
    battle_queue[i].post_time     = -1;
    battle_queue[i].batent_ref    = -1;
    battle_queue[i].action        = -1;
    battle_queue[i].data          = "";
    battle_queue[i].batent_party  = -1;
}

/// sorts the battle queue by their time values.  
/// Tied times are clustered but not specially distinguished in any way.
///
/// uses a bubble sort because I'm a horrible person.  This should also be changed for effic.
///
/// @see arTemp
void sort_battle_queue()
{

//Log( "*********************************" );
//Log( "**** sort_battle_queue START ****" );

//dump_battle_queue();

//Log( "*********************************" );

    int cur_low = MAX_BATTLE_DELAY + 1;
    int cur_idx;

    int i, j;
    for( i=0; i<battle_queue_count; i++ )
    {
    
        cur_low = battle_queue[i].time;
        cur_idx = i;

//Log( "pass "+str(i)+" start - cur_low: " + str(cur_low) );
//Log( "pass "+str(i)+" start - cur_idx: " + str(cur_idx) );

        for( j=i; j<battle_queue_count; j++ )
        {
//Log( "pass "+str(i)+"."+str(j)+" - cur_low: " + str(cur_low) );
//Log( "pass "+str(i)+"."+str(j)+" - cur_idx: " + str(cur_idx) );
            if( battle_queue[j].time < cur_low )
            {

//Log( "pass "+str(i)+"."+str(j)+" Switching to lower!" );

                cur_low = battle_queue[j].time;
                cur_idx = j;
                
//Log( "pass "+str(i)+"."+str(j)+" - cur_low: " + str(cur_low) );
//Log( "pass "+str(i)+"."+str(j)+" - cur_idx: " + str(cur_idx) );
            }
        }
        
        if( cur_idx != i )
        {
//Log( "pass "+str(i)+" end - swiching ("+str(cur_idx)+","+str(i)+")! " );

            switch_battle_queue_slots( cur_idx, i );
        }
    }

//Log( "*********************************" );

//dump_battle_queue();
    
//Log( "**** sort_battle_queue END ****" );
//Log( "*******************************" );
}

/// debugging function, dumps the current battle queue's contents to the log.
///
void dump_battle_queue()
{
    int i;
    string aliveOrDead = "";

    Log( "" );
    Log( "dump_battle_queue()" );
    Log( "===================" );
    Log( "Currently "+str(battle_queue_count)+" entries of "+str(MAX_BATTLE_QUEUE_ENTRIES)+" max." );
    Log( "Maximum delay: "+str(MAX_BATTLE_DELAY) );
    Log( "Dumping content: " );
    Log( "===================" );

    for( i=0; i<battle_queue_count; i++ )
    {
        if( BattleQueueActorIsActive(i) )
            aliveOrDead = "live";
        else
            aliveOrDead = "dead";
        
    
        Log( "["+str(i)+"] "+
            str(battle_queue[i].time)+" "+
            str(battle_queue[i].post_time)+" "+
            str(battle_queue[i].batent_ref)+"   "+
            str(battle_queue[i].batent_party)+" "+
            aliveOrDead+"   "+
            str(battle_queue[i].action)+"   '"+
            battle_queue[i].data+"'"
        );
    
    }
    
    Log( "DONE dump_battle_queue()" );
    Log( "===================" );
    Log( "" );
}

/// adds an entry into the battle queue.
/// calls the sorting function.
/// errors and breaks if batent_ref < 0
/// if in strict mode (defined with BATTLE_QUEUE_STRICT), will error if trying to add a batent_ref
///   that is already in the stack.
/// 
/// pre_time is the "charge" until the event fires.
/// post_time is the time, if any, that will be added until the next action.
void add_battle_queue_charge_entry( int charge_time, int delay_time, int batent_ref, int batent_party, string data )
{
    _add_battle_queue_entry( charge_time, delay_time, batent_ref, batent_party, BACT_CHARGE, data );
}

void add_battle_queue_delay_entry( int delay_time, int batent_ref, int batent_party, string data )
{
    _add_battle_queue_entry( delay_time, 0, batent_ref, batent_party, BACT_DELAY, data );
}


void _add_battle_queue_entry( int pre_time, int post_time, int batent_ref, int batent_party, int action, string data )
{
    if( pre_time > MAX_BATTLE_DELAY )
    {
        pre_time = MAX_BATTLE_DELAY;
    }
    
    if( batent_ref < 0 )
    {
        ErrorHandler( "_add_battle_queue_entry(): batent_ref was an invalid value (cannot be negative)" );
        return; 
    }
    
    int i;
    if( BATTLE_QUEUE_STRICT )
    {
        for( i=0; i<battle_queue_count; i++ )
        {
            if( battle_queue[i].batent_ref == batent_ref && battle_queue[i].batent_party == batent_party )
            {
                ErrorHandler( "_add_battle_queue_entry(): batent_ref was already in the stack, while we were in strict mode." );
                return; 
            }
        }
    }
    
    battle_queue[battle_queue_count].time           = pre_time;
    battle_queue[battle_queue_count].post_time      = post_time; 
    battle_queue[battle_queue_count].batent_ref     = batent_ref;
    battle_queue[battle_queue_count].action         = action;
    battle_queue[battle_queue_count].data           = data;
    battle_queue[battle_queue_count].batent_party   = batent_party;
    
    battle_queue_count++;
    
    sort_battle_queue();
}



/// resets the battle queue to emptiness.
void clear_battle_queue()
{
    int i;
    for( i=0; i<battle_queue_count; i++ ) {
        clean_battle_queue_slot(i);
    }

    battle_queue_count = 0;
}

/// removes the topmost entry from the battle queue, one assumes after 
/// that battle entity has fulfilled it's action.
void pop_battle_queue()
{
    int i;
    if( battle_queue_count > 1 )
    {
        for( i=1; i<battle_queue_count; i++ )
        {
            switch_battle_queue_slots( i, i-1 );
        }
    }
    
    if( battle_queue_count )
    {
        battle_queue_count--;
    }
}

/// Advances the battle queue by a given amount of ticks.
/// used by advance_battle_queue_to_next_action(), as it passed in the time of the top item on the queue.
/// 
/// Note, allies and enemies, if not incapacitated, decreemnt their queue-slot's time by their current REA
/// every tick.  Any non-actor event on the queue (such as spell durations) only decrement by 1 every tick.
///
/// if you want to "turn back the clock", set reverseMode to 1.  Normal operation should have it set to 0.
///
/// This function is what one would use if making an active time battle system from this subsystem,
///   But if one were to do that, it is advisable that you check for negative values (since if you
///   decrement by more than 1 per tick (in the case of 'fast' battles), you'll quite often have
///   mounting negative values, etc.
///
/// 
/// Errors if passed in a negative or 0 value to the time parameter.
///
/// @param the (positive) number of ticks to advance the battle clock.
/// @param a flag to reverse the direction of the battle clock.
void advance_battle_queue_by_time( int time, int reverseMode )
{
    int i, j;
    
    if( time <= 0 )
    {
        ErrorHandler( "advance_battle_queue_by_time(): cannot pass the clock down by a negative or zero amount ("+str(time)+")." ) ;
        return;
    }
    
    for( j=0; j<time; j++ )
    {
        for( i=0; i<battle_queue_count; i++ )
        {
            if( BattleQueueActorIsActive(i) )
            {

                if( 
                    battle_queue[i].batent_party == PARTY_ENEMY || 
                    battle_queue[i].batent_party == PARTY_ALLY
                ) {
                    
                    if( !reverseMode )
                    {
                        battle_queue[i].time -= bat_rea( battle_queue[i].batent_ref, battle_queue[i].batent_party );
                    }
                    else
                    {
                        battle_queue[i].time += bat_rea( battle_queue[i].batent_ref, battle_queue[i].batent_party );
                    }   
                }
                else if( battle_queue[i].batent_party == PARTY_NULL ) //status and spell effects.
                {
                    if( !reverseMode )
                    {
                        battle_queue[i].time--;
                    }
                    else
                    {
                        battle_queue[i].time++;
                    }
                }
                else
                {
                    ErrorHandler( "advance_battle_queue_by_time(): Did not recognize how to handle the time-decrementation of someone of party '"+str(battle_queue[i].batent_party)+"'." );
                }           
            }
        }
    
        sort_battle_queue();
    }
}

int BattleQueueActorIsActive( int i )
{
    if( battle_queue[i].batent_party == PARTY_ALLY )
    {
        return !AllyIsIncapacitated( battle_queue[i].batent_ref );
    }
    else if( battle_queue[i].batent_party == PARTY_ENEMY )
    {
        return !EnemyIsIncapacitated( battle_queue[i].batent_ref );
    }
    else if( battle_queue[i].batent_party == PARTY_NULL ) //status effects, etc.
    {
        return 1;
    }
    else
    {
        ErrorHandler( "BattleQueueActorIsActive(): Did not recognize how to handle the active-rating of someone of party '"+str(battle_queue[i].batent_party)+"'." );
        return 0;
    }
}

/// advances the battle queue so that the top action becomes 0, and everyone else is 
/// decremented by the same amount.
///
/// errors and breaks if the topmost entry was already < 0, you insensitive clod.
/// errors and breaks if the battle queue was empty.
void advance_battle_queue_to_next_action()
{
    int i, top_actor, errorcount;
    
    /// safety precaution for my sanity's sake.
    errorcount = 0;

    if( !battle_queue_count )
    {
        ErrorHandler( "advance_battle_queue_to_next_action(): The battle queue was empty, and so unupdatable.  Jerk." );
        return;         
    }
    
    if( battle_queue[0].time < 0  )
    {
        ErrorHandler( "advance_battle_queue_to_next_action(): The top entry to the battle_queue was already zero or less time ("+str(battle_queue[0].time)+").  You should've popped that bitch off already.  Twit." );
        return;         
    }
    
    top_actor = battle_queue_index_of_top_incapacitated_actor();
    
    if( top_actor < 0 )
    {
        ErrorHandler( "advance_battle_queue_to_next_action(): Everyone in the queue was incapacitated.  This should never have been called." );
        return;     
    }
    
    if( battle_queue[top_actor].time < 0  )
    {
        ErrorHandler( "advance_battle_queue_to_next_action(): The topmost active actor in the battle_queue was already zero or less time ("+str(battle_queue[top_actor].time)+").  You should've popped that bitch off already.  Twit." );
        return;         
    }
    
    /// let's spin this until we return.  Somewhat dangerous!
    while( 1 )
    {
        /// advance by one tick!
        advance_battle_queue_by_time( 1, 0 );


if( mode_battle_debug )
{
    render_battle_debug_window();
    showpage();
    
    _debug_tick_counter++;
    
    if( !debug_metamode_active )
    {
        while( !debug_metamode_active_steppassthru )
        {
            Render();
            RenderBattle();
            ShowPage();
        }
    
        debug_metamode_active_steppassthru = 0;
    }
}

        /// get the new topmost active actor.
        top_actor = battle_queue_index_of_top_incapacitated_actor();
        
        /// if the new topmost active actor is at go-time, we've accomplished our mission.
        if( battle_queue[top_actor].time <= 0 )
        {
            increment_everyone_after_the_topactor_if_topactor_and_nextactor_are_both_ready(top_actor);
            return;
        }
        
        /// just a little "hey, this is a potentially dangerous infinite loop which has probably gone into uncharted territory" message.
        if( errorcount > 300 )
        {
            ErrorHandler( "The while(1) loop in advance_battle_queue_to_next_action() has spun for 300 or more times without finding anything.  Just thought you should know, dude." );
        }
        
        errorcount++;
    }

/*
******  This method is no longer viable.  It didn't take the REA-factor into account.
******************************************************************************************
Log( ">>> Finding the newest active battle actor and make them the next one to act..." );
    ///find the first active battle actor and make them the next one to act.
    for( i=0; i<battle_queue_count; i++ )
    {
Log( ">>> checking ["+str(i)+"]..." );
    
        if( BattleQueueActorIsActive(i) )
        {
Log( ">>> ... ["+str(i)+"] is active!" );
            
            advance_battle_queue_by_time( battle_queue[i].time, 0 );
            return;
        }
        else
        {
Log( ">>> ... ["+str(i)+"] is inactive.  Checking next..." );
        }
    }
*/  
}

void increment_everyone_after_the_topactor_if_topactor_and_nextactor_are_both_ready( int top_actor ) {
    
    if( (top_actor+1) >= battle_queue_count ) { /// if there's nobody next, our job is done.
        return;
    }
    
    int addto = 0;
    int i = 0;
    
    if( battle_queue[top_actor+1].time <= 0 ) {
        addto = abs(battle_queue[top_actor+1].time) + 1;
        
        for( i = top_actor+1; i<battle_queue_count; i++ ) {
            battle_queue[i].time += addto;
            
            if( i != top_actor+1 ) {
                //adds another tick's worth of time to everyone but the next actor.
                battle_queue[i].time += bat_rea( battle_queue[i].batent_ref, battle_queue[i].batent_party );
            }
        }
    }   
}

/// returns the battle queue index of the topmost active battle actor.
/// returns -1 if there are no active battle actors.
int battle_queue_index_of_top_incapacitated_actor()
{
    int i;
    
    for( i=0; i<battle_queue_count; i++ )
    {   
        if( BattleQueueActorIsActive(i) )
        {
            return i;
        }
    }
    
    return -1;
}

/// returns the number of battle queue entries currently at 0 (or less) time.
/// useful for resolving action ties (if you so wish such functionality), or just resolving them
///   as they lay.
int battle_queue_zero_count()
{
    int i;
    for( i=0; i<battle_queue_count; i++ )
    {
        if( battle_queue[i].time > 0 )
        {
            return i;
        }
    }
}

/// Resolves an action after it's fully charged on the battle queue.
///
void ResolveAction( int actor_idx, int actor_party, string action_data, int delay_time )
{
    int itemUser, mpCostReq, mpCost;

    LoadTargettingFromString( action_data );

    ///////////
    ///
    /// This should totally be done elsewhere.
    itemUser = GetTargIdxByText( "ITEM_DELETE" );
    if( itemUser >= 0 )
    {
        itemUser = GetTargIdxByText( "Attacker" );
    
        if( GetTargMode(itemUser) == PARTY_ALLY )
        {
            ChangeSpriteAnimation( 
                bat_getRenderRef(GetTargID(itemUser), GetTargMode(itemUser)), 
                "USE_ITEM" 
            );
        }   
    }

    ///////////
    ///
    /// This also should be done elsewhere.
    ///
    /// Also, a mute check maybe should go here?
    mpCostReq = GetTargIdxByText( "MP_USE_REQUIRE" );
    if( mpCostReq >= 0 )
    {
        mpCost = GetTargID( mpCostReq );
        mpCostReq = GetTargIdxByText( "Attacker" );
        
        if( mpCost <= bat_cur_mp(actor_idx,actor_party) )
        {
            bat_change_mp( actor_idx, actor_party, 0-mpCost );
        
            if( actor_party == PARTY_ALLY )
            {
                ChangeSpriteAnimation( 
                    bat_getRenderRef(actor_idx, actor_party), 
                    "CASTING" 
                );
            }
        }
        /// if there's an MP requirement and it wasn't met, just bail out.  
        else 
        {
            //Should use this for the skill name instead of BASE_DELAY --> GetSkillDelayTime(GetSkill("Parry"))
            
            add_battle_queue_delay_entry( delay_time, actor_idx, actor_party, "" );
            return;
        }
    }
    ///
    ///
    ///////////

    
    /// anything that gets triggered upon an action (on_act) 
    /// gets called right now.
    trigger_on_act( actor_idx, actor_party );

    /// The action executes!  FINALLY.
    MandatoryCallFunction( GetTargettingEffectFunc() );

/***************
/***************
/***************
This would've been true if we remove the item from inventory 
when it's actualy used, but instead we've opted to remove it
from inventory when it's first selected to be used.

    ///we check if there's an item delete command every time.  Maybe we should optimize?
    ///if we add too many PARTY_NULL special directive checks here, I suggest we just do a 
    /// simple poll for any PARTY_NULL mode entries in the targetting array, and if any exist,
    /// only then should we check everything. -grue
    itemUse = GetTargIdxByText( "ITEM_DELETE" );
    if( itemUse >= 0 )
    {
        SetTargettingItemDecr( GetTargID(itemUse) );
        DecrementTargettingItem();
    }
    /// end item-use check
***************
***************
***************/
    
    /// Now that the action has executed, let's put this fellah back on the battle queue, 
    /// with a delay-action.  When next he gets to the top of the battle queue, he'll get to 
    /// choose a whole new action, and so the cycle continues.  It's the CIRRRRCLE OF DEEEEATH!
    add_battle_queue_delay_entry( delay_time, actor_idx, actor_party, "" );
}

int add_guard_action( int b_idx, int b_party, int delay, int guard_power )
{
    MessageBox( "add_guard_action: unfortunatly, no human alive knows how BACT_GUARD works.  It's tragic." );

    _add_battle_queue_entry( delay, delay, b_idx, b_party, BACT_GUARD, str(guard_power) );
}

int get_best_guard( int b_idx, int b_party )
{
    int i, best_def, d;
    best_def = 0;

    for( i=0; i<battle_queue_count; i++ )
    {
        if(
            battle_queue[i].batent_ref == b_idx && 
            battle_queue[i].batent_party == b_party &&
            battle_queue[i].action == BACT_GUARD
        ) {
            d = val(battle_queue[i].data);
            
            if( d > best_def ) {
                best_def = d;
            }
        }
    }
    
    return best_def;
}