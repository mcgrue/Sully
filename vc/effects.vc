///effects.vc!
///
/// This the the home for functions referred to in datafiles,
/// like item/spell targetting and effect functions!
///

/////////////////////////////////////////////////////////////////////////////////////////////
/// NON-battle triggers!
/////////////////////////////////////////////////////////////////////////////////////////////

/// everytime a player-character is involved in a resting action (sleeping at
/// an inn, sleeping in a tent, etc) this gets called.
///
/// @see PartyRest() Calls this for the entire party.
/// @see Inn() Calls PartyRest();
void trigger_on_rest( int cast_idx )
{
    int i, j, cur_status_idx;
    string cur_status_name;

    for( j=0; j<GetCastStatusCount(cast_idx); i++ )
    {
        cur_status_name = GetCastStatus( cast_idx, j );

        cur_status_idx = GetStatus( cur_status_name );

        if( cur_status_idx >= 0 )
        {
            if( StatusRemovedByI(cur_status_idx, "on_rest") )
            {
                castRemoveAllStatus( cast_idx, cur_status_name );
            }
        }
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


/// This gets called when a PARTY_NULL effect expires.
///
///
void HandleBattleQueueSpecialEffectExpiry( int q_idx )
{
    int my_ref = battle_queue[q_idx].batent_ref;
    int my_party = battle_queue[q_idx].batent_party;
    string my_data = battle_queue[q_idx].data;

    int status_tidx, status_bitch_tidx;
    int status_idx, status_bitch_bidx, status_bitch_pidx;

    if( my_party != PARTY_NULL )
    {
        ErrorHandler("HandleBattleQueueSpecialEffectExpiry(), associated party wasn't == PARTY_NULL (got: "+str(my_party)+") " );
        return;
    }

    loadTargettingFromString( my_data );
    status_tidx = GetTargIdxByText( "STATUS" );
    status_bitch_tidx = GetTargIdxByText( "AFFECTED" );

    if( status_tidx >= 0 && status_bitch_tidx >= 0 )
    {
        status_idx = GetTargID(status_tidx);
        status_bitch_bidx = GetTargID(status_bitch_tidx);
        status_bitch_pidx = GetTargMode(status_bitch_tidx);
    }
}



////////////////////////////////
//  Custom targetting functions
////////////////////////////////

// This asks for a single party member, and requires that their (cur_hp < max_hp) and cur_hp != 0
// Uses the vc/util/targetting.vc helper functions
void HP_OC_targ_menu()
{
    int cast_idx = -2;

    while( cast_idx < -1 )
    {
        cast_idx = MenuPartyBox();

        if( cast_idx == -1 ) //we've been cancelled!
        {
            CancelTargetting();
            MenuHappyBeep();
        }
        else //we've got a valid cast_idx.  Let's check for validity!
        {
            // If this guy isn't at full HP and isn't dead,
            // He's a valid target!
            if( master_cast[cast_idx].stats[STAT_MAX_HP] != master_cast[cast_idx].cur_hp
                && master_cast[cast_idx].cur_hp > 0 )
            {
                AddTarget( cast_idx, 0, master_cast[cast_idx].name );
                TargettingDone();
                MenuHappyBeep();
            }
            else
            {
                cast_idx = -2;
                MenuAngryBuzz();
                MenuPartyBoxRestorePosition();
            }
        }
    }
}


// This asks for a single party member, and requires that their (cur_mp < max_mp)
// Uses the vc/util/targetting.vc helper functions
void MP_OC_targ_menu()
{
    int cast_idx = -2;

    while( cast_idx < -1 )
    {
        cast_idx = MenuPartyBox();

        if( cast_idx == -1 ) //we've been cancelled!
        {
            CancelTargetting();
            MenuHappyBeep();
        }
        else //we've got a valid cast_idx.  Let's check for validity!
        {
            // If this guy isn't at full HP and isn't dead,
            // He's a valid target!
            if( master_cast[cast_idx].stats[STAT_MAX_MP] != master_cast[cast_idx].cur_mp )
            {
                AddTarget( cast_idx, 0, master_cast[cast_idx].name );
                TargettingDone();
                MenuHappyBeep();
            }
            else
            {
                cast_idx = -2; //set this to
                MenuAngryBuzz();
                MenuPartyBoxRestorePosition();
            }
        }
    }
}


// This asks for a single party member, and requires that their (cur_hp == 0)
// Uses the vc/util/targetting.vc helper functions
void DEAD_OC_targ_menu()
{
    int cast_idx = -2;

    while( cast_idx < -1 )
    {
        cast_idx = MenuPartyBox();

        if( cast_idx == -1 ) //we've been cancelled!
        {
            CancelTargetting();
            MenuHappyBeep();
        }
        else //we've got a valid cast_idx.  Let's check for validity!
        {
            // If this guy is dead, He's a valid target!
            if( 0 >= master_cast[cast_idx].cur_mp )
            {
                AddTarget( cast_idx, 0, master_cast[cast_idx].name );
                TargettingDone();
                MenuHappyBeep();
            }
            else
            {
                cast_idx = -2; //set this to
                MenuAngryBuzz();
                MenuPartyBoxRestorePosition();
            }
        }
    }
}

// This asks for a single party member, and requires that their (cur_hp > 0)
// Uses the vc/util/targetting.vc helper functions
void LIVE_OC_targ_menu()
{
    int cast_idx = -2;

    while( cast_idx < -1 )
    {
        cast_idx = MenuPartyBox();

        if( cast_idx == -1 ) //we've been cancelled!
        {
            CancelTargetting();
            MenuHappyBeep();
        }
        else //we've got a valid cast_idx.  Let's check for validity!
        {
            // If this guy is alive, He's a valid target!
            if( 0 < master_cast[cast_idx].cur_mp )
            {
                AddTarget( cast_idx, 0, master_cast[cast_idx].name );
                TargettingDone();
                MenuHappyBeep();
            }
            else
            {
                cast_idx = -2; //set this to
                MenuAngryBuzz();
                MenuPartyBoxRestorePosition();
            }
        }
    }
}


void pearl_use()
{
    string s;

    SoundHoly();

    if( GetTargettingCount() != 1 )
    {
        AutoText( T_SULLY, "Dear sweet vecna!  Grue, or someone altering the system, screwed something up!~How the heck did the Pearl of Truth get used on multiple people?!" );
    }
    else
    {
        s = master_cast[GetTargID(0)].name;

        if( equ(s,"darin") )
        {
            TextBox( T_DARIN, "Sometimes, late at night, I think unheroic","thoughts!","...I'm so ashamed." );

            if( CharInParty("Crystal") )
            {
                TextBox( T_CRYSTAL, "*gasp*!","","" );
            }
        }
        else if( equ(s,"dexter") )
        {
            TextBox( T_DEXTER, "This one time, at Magic Camp,","I stuck a wand up m...","" );
            TextBox( T_DARIN, "That's enough Truth from the pearl","for today, I think.","" );
        }
        else if( equ(s,"crystal") )
        {
            AutoText( T_CRYSTAL, "I am good and pure, and have never done anything wrong ever." );

            if( CharInParty("Darin") )
            {
                AutoText( T_DARIN, "*snort*" );
                AutoText( T_CRYSTAL, "You are *so* on the couch tonight after we save the world, mister." );
            }
        }
        else if( equ(s,"sara") )
        {
            TextBox( T_SARA, "I put a 'kick me' sign on Crystal's","back when she wasn't looking.","" );

            if( CharInParty("Crystal") )
            {
                TextBox( T_CRYSTAL, "WHAT?!","","" );
            }

            TextBox( T_SARA, "...and by 'sign' I mean 'wrote on her","robes in machine grease'.","" );

            if( CharInParty("Crystal") )
            {
                TextBoxM( T_CRYSTAL, "...","","" );
                TextBoxM( T_CRYSTAL, "...you gonna die, bitch!","","" );
            }
        }
        else if( equ(s,"galfrey") )
        {
            TextBoxM( T_GALFREY, "...","","" );
            Autotext( T_GALFREY, "...sometimes... when I get nervous... I put my fingers under my armpits, and then I sniff'm." );

            if( CharInParty("Crystal") )
            {
                Autotext( T_CRYSTAL, "Eww!" );
                Autotext( T_GALFREY, "...Hey.  If you didn't want to hear it, you shouldn't've handed me the Pearl." );
            }
        }
        else
        {
            AutoText( T_SULLY, "We're looking for a guy named '"+s+"'.  Anyone by that name here?  No?  Bummer."  );
        }
    }
}


void worldmap_use()
{
    MenuPageTurn();

    TextBox( T_STAN, "I have cursed this map!","No location for YOU!","Mwahahaha!" );
}

void long_piece_use()
{
    TextBox( T_DARIN, "What... does this do again?","", "" );
    TextBox( T_LANCE, "It opens that funny door partway","up Mount Jujube!","" );
    TextBox( T_LANCE, "Come on.  We're so close to","that Dwarf Village I can","taste it!" );
}

void gswitch_use()
{
    int idx = IsItem( "Golden_Switch" );

    if( !Flags[F_GSWITCH] )
    {
        TextBox( T_DARIN, "Wow!  A real golden switch!","And it even flips on and off!","" );
    }

    if( master_items[idx].icon == 43 )
    {
        master_items[idx].icon == 44;
    }
    else
    {
        master_items[idx].icon == 43;
    }

    SoundSwitch();
    UnPress(UNPRESS_ALL);

    Flags[F_GSWITCH]++;
}



void starlight_use()
{
    int user_idx, target_idx;

    if( !IsInBattle() )
    {
        starlight_use_MENU();
    }
    else
    {
        user_idx = GetTargIdxByText( "Attacker" );
        target_idx = GetTargIdxByText( "Target" );

        /// this battle effect retargets if the former target was dead.
        AttemptSingleLivingRetarget();

        AddGATTACA(
            GetTargID(target_idx),
            GetTargMode(target_idx),
            BS_CHANGE_MP,
            15
        );

        TurnBattleEffectOff( 1 );
    }
}

void herb_use()
{
    int user_idx, target_idx;

    if( !IsInBattle() )
    {
        herb_use_MENU();
    }
    else
    {
Log( "herb_use" );
        user_idx = GetTargIdxByText( "Attacker" );
        target_idx = GetTargIdxByText( "Target" );

        /// this battle effect retargets if the former target was dead.
        AttemptSingleLivingRetarget();

        AddGATTACA(
            GetTargID(target_idx),
            GetTargMode(target_idx),
            BS_CHANGE_HP,
            30
        );

        TurnBattleEffectOn( "healy_sparkles" );

Log( "herb_use end" );
    }
}


void skill_std_meditate() {

    int target_idx;
    int amt;

    target_idx = GetTargIdxByText( "Target" );

    amt += Random(2, 10);

    AddGATTACA(
        GetTargID(target_idx),
        GetTargMode(target_idx),
        BS_CHANGE_MP,
        amt
    );

    TurnBattleEffectOn( "magic_sparkles" );
}


/// 2x attacks!
void skill_swd_sworddance() {

/*
    int attacker_idx = GetTargIdxByText( "Attacker" );


    AddGATTACA(
        GetTargID(attacker_idx),
        GetTargMode(attacker_idx),
        BS_CHANGE_NONE,
        0
    );

    //set_standard_effect_onComplete( "_skill_sworddance_AttackFunc", 1 );
*/
    TurnBattleEffectOn( "_skill_sworddance_AttackFunc" );
}


void _skill_sworddance_AttackFunc()
{
    int i, stk, attacker_idx, attacker_party;

    i = GetTargIdxByText( "Attacker" );

    attacker_idx    = GetTargID(i);
    attacker_party  = GetTargMode(i);
    stk = bat_stk( attacker_idx, attacker_party );

    stk = stk*2; //set stk to twice the normal strike.

    if( stk <= 0 ) {
        ErrorHandler("BasicAttackFunc: STK for '"+bat_getName(attacker_idx, attacker_party)+"' was "+str(stk));
    }

    /// let's do an attack right now and then inc the strike count!
    if( __current_strikecount < stk ) {
        _BasicAttackFunc();
        __current_strikecount++;
    }

    /// if we need more strikes, let's make sure GATTACA passes back here afterwards.
    if( __current_strikecount < stk ) {
        SetGATTACA_onComplete("_skill_sworddance_AttackFunc");
    } else {
        SetGATTACA_onComplete("");
        __current_strikecount = 0;
    }

    /// turn the primary battle effect off and trigger GATTACA
    /// Basic Attack Func doesn't have any non-GATTACA animations or anything,
    /// so let's just trigger GATTACA now!
    TurnBattleEffectOff( 1 );
}

/// Let's heal 1.5*Magic Power +/- 10%.
///
void skill_wm_heal()
{
    int user_idx, target_idx;
    int amt, tmp;

    user_idx = GetTargIdxByText( "Attacker" );
    target_idx = GetTargIdxByText( "Target" );

    /// this battle effect retargets if the former target was dead.
    AttemptSingleLivingRetarget();

    amt = bat_mag( GetTargID(user_idx), GetTargMode(user_idx) ) * 3;
    amt = amt / 2;

    tmp = amt/10;
    amt += Random(0-tmp, 0+tmp);
    if( amt < 0 )
    {
        amt = 1;
    }

    AddGATTACA(
        GetTargID(target_idx),
        GetTargMode(target_idx),
        BS_CHANGE_HP,
        amt
    );

    TurnBattleEffectOn( "healy_sparkles" );
}


/// Revive a fallen ally with 25% HP.
///
void skill_wm_revive()
{
    int user_idx, target_idx;
    int amt, tmp;

    if( !IsInBattle() ) {
MessageBox( "Please implement for the menu." );
        return;
    }

    target_idx = GetTargIdxByText( "Target" );

    if( !bat_is_dead( GetTargID(target_idx), GetTargMode(target_idx) ) ) {
        TurnBattleEffectOn( "skill_fizzle" );
        return;
    }

    amt = bat_max_hp( GetTargID(target_idx), GetTargMode(target_idx) );
    amt = amt / 4; // dividing by 4 is 25%
    if (amt <= 0) amt = 1; // well, it's possible.

    AddGATTACA_ArbitraryString(
        GetTargID(target_idx),
        GetTargMode(target_idx),
        str(amt),
        BOUNCETEXT_GREEN
    );

    bat_revive(
        GetTargID(target_idx),
        GetTargMode(target_idx),
        amt
    );

    TurnBattleEffectOn( "holy_light" );

    set_standard_effect_onComplete( "update_animations_post_effect", 0 );
}

void update_animations_post_effect() {

    int target_idx = GetTargIdxByText( "Target" );

    bat_updateBattleSpriteAnimations( GetTargID(target_idx), GetTargMode(target_idx) );

    TurnBattleEffectOff(1);
}


void skill_wm_shield() {

    if( !IsInBattle() ) {
        return;
    }

    int target_idx = GetTargIdxByText( "Target" );

    if( bat_is_dead( GetTargID(target_idx), GetTargMode(target_idx) ) ) {
        TurnBattleEffectOn( "skill_fizzle" );
        return;
    }

    bat_addStatus( GetTargID(target_idx), GetTargMode(target_idx), "Protect" );

    MessageBox( "So, there's totally no implemented duration-handling for status yet." );

    AddGATTACA_ArbitraryString(
        GetTargID(target_idx),
        GetTargMode(target_idx),
        "Protect",
        BOUNCETEXT_WHITE
    );

    __fx__offs_x = -24;
    __fx__offs_y = -4;
    //standard_effect_oncomplete = "protecty_shield_oncomplete";
    TurnBattleEffectOn( "protecty_shield" );
}

void skill_wm_might() {

    if( !IsInBattle() ) {
        return;
    }

    int target_idx = GetTargIdxByText( "Target" );
    int targ_mcg_ref = bat_getRenderRef(GetTargID(target_idx),GetTargMode(target_idx));

    if( bat_is_dead( GetTargID(target_idx), GetTargMode(target_idx) ) ) {
        TurnBattleEffectOn( "skill_fizzle" );
        return;
    }

    bat_addStatus( GetTargID(target_idx), GetTargMode(target_idx), "Might" );

    MessageBox( "So, there's totally no implemented duration-handling for status yet." );

    AddGATTACA_ArbitraryString(
        GetTargID(target_idx),
        GetTargMode(target_idx),
        "Might",
        BOUNCETEXT_WHITE
    );

    __fx__offs_x = (mcg_width(targ_mcg_ref)/2) - 16; // align to horizontal middle
    __fx__offs_y = mcg_height(targ_mcg_ref) - 40; // align to bottom

    TurnBattleEffectOn( "red_light_swirl" );
}

void skill_wm_invis() {

    if(!IsInBattle() ) {

        battle_avoidance = 100;
        SoundTwinkle();
    } else {
        MessageBox("You're not supposed to use this in battle! Oh god, now look what you did!");
    }
}





#include "vc/standard_effect.vc"

void bomby_blast()
{
    standard_effect(
        "res\sfx\BOMB.WAV", 50,
        "res\images\battle\effects\burst.png", 32, 32
    );
}

void healy_sparkles()
{
    standard_effect(
        "res\sfx\MAGIC.WAV", 103,
        "res\images\battle\effects\sparkle-green.pcx", 32, 32
    );
}

void magic_sparkles()
{
    standard_effect(
        "res\sfx\CIGAM.WAV", 103,
        "res\images\battle\effects\sparkle-blue.pcx", 32, 32
    );
}

void holy_light()
{
    standard_effect(
        "res\sfx\sun.wav", 120,
        "res\images\battle\effects\revive.pcx", 24, 48
    );
}

void protecty_shield() {
    standard_effect(
        "res\sfx\charge.wav", 64,
        "res\images\battle\effects\shield.pcx", 16, 32
    );
}

void red_light_swirl() {
    standard_effect(
        "res\sfx\charge.wav", 85,
        "res\images\battle\effects\boost.png", 32, 40
    );
}

void skill_fizzle() {
    MessageBox( "Well, do some kind of fizzle sound and disappointed frame if a spell fizzles." );
}

void medicine_use()
{
    if( !IsInBattle() )
    {
        medicine_use_MENU();
    }
}

void brew_use()
{
    if( !IsInBattle() )
    {
        brew_use_MENU();
    }
}

//heal 15 MP
void starlight_use_MENU()
{
    int i;
    SoundHoly();

    for(i=0; i<GetTargettingCount(); i++)
    {
        HealMP( GetTargID(i), 15 );
    }
}


void skill_wm_heal_MENU() {
    MessageBox( "Gayo, I gave you a working skill menu.  Now implement skill_wm_heal_MENU" );
}


void herb_use_MENU()
{
    int i;
    SoundEat();

    for(i=0; i<GetTargettingCount(); i++)
    {
        HealHP( GetTargID(i), 30 );
    }
}




void medicine_use_MENU()
{
    int i;

    SoundDrink();

    for(i=0; i<GetTargettingCount(); i++)
    {
        HealHP( GetTargID(i), 90 );
    }
}


void brew_use_MENU()
{
    int i;

    SoundDrink();

    for(i=0; i<GetTargettingCount(); i++)
    {
        if( master_cast[GetTargID(i)].cur_hp == 0 )
        {
            HealHP( GetTargID(i), 1 );
        }
    }
}















/////// The party box for in-menu party selection
///////

int _inMenuPartyBox = 0;

// Draws a graphical box that lets you select someone presently in the party.
// returns their master_cast index.
int MenuPartyBox()
{
    _inMenuPartyBox = 1;

    int i, selected, frame;
    int mini_hold = menu_idx;
    menu_idx = 10000; // To make a grue happy

    int bordersize = 5;
    int f = 0; //make this alterable.

    int x1 = TextWidth(f, "_HP");
    int x2 = x1 + TextWidth(f, "X");
    int x3 = x2 + TextWidth(f, "000");
    int x4 = x3 + TextWidth(f, "/");
    int x5 = x4 + TextWidth(f, "000");

    int y_spacer = 1; //make this alterable.
    int y1 = y_spacer;
    int y2 = y1+ FontHeight(f)+y_spacer;
    int y3 = y2+ FontHeight(f)+y_spacer;
    int y4 = y3+ FontHeight(f)+y_spacer;

    int temp;

    if( _MPB_restore )
    {
        _MPB_restore = 0;
        selected = _MPB_store;
    }

    for( i=0; i<PartySize(); i++ )
    {
        _MPB_panes[i] = NewImage(x5,y4);

        RectFill(0,0, x5,y4, transcolor, _MPB_panes[i]);

        PrintString(x1, y1, _MPB_panes[i], f, master_cast[party[i]].name);
        PrintString(x3, y2, _MPB_panes[i], f, "/");
        PrintString(x3, y3, _MPB_panes[i], f, "/");

        PrintRight(x1, y2, _MPB_panes[i], f, "HP");
        PrintRight(x1, y3, _MPB_panes[i], f, "MP");

        PrintRight(x3, y2, _MPB_panes[i], f, str(GetCurHP(i)));
        PrintRight(x5, y2, _MPB_panes[i], f, str(GetRealMaxHP(i)));

        PrintRight(x3, y3, _MPB_panes[i], f, str(GetCurMP(i)));
        PrintRight(x5, y3, _MPB_panes[i], f, str(GetRealMaxMP(i)));
    }

    int high = PartySize() * (y4+FontHeight(f)) + (bordersize*2);
    int wid = ( x5+TextWidth(f, "000") ) + (bordersize*2);
    int xpos = (ImageWidth(screen) / 2) - (wid / 2) - bordersize;
    int ypos = (ImageHeight(screen) / 2) - (high / 2) - bordersize;

    int x_in = xpos+TextWidth(f, "00");
    int y_in = ypos+FontHeight(f);

    UnPress(UNPRESS_ALL);

    int cancelled = 0;
    int done = 0;

    while( !done )
    {
        MenuBackGroundDraw(); // Draw universal things

        if (IsInMenu()) CallFunction(master_menus[mini_hold].draw_func);

        V1_Box(xpos, ypos, wid, high);

        for(i = 0; i < PartySize(); i++)
        {
            TBlit( x_in, y_in + (i*(y4+FontHeight(f))), _MPB_panes[i], screen );

            if (i == selected) {
                PrintString( x_in, y_in+(i*(y4+FontHeight(f))), screen, f, "_>" );
            }
        }

        ShowPage();
        selected = MenuControlArrows(selected, PartySize());

        if( MenuConfirm() ) {
            done = 1;
        }

        if( MenuCancel() ) {
            cancelled = 1;
            done = 1;
        }
    }

    //free the temporary images...
    for( i=0; i<PartySize(); i++ )
    {
        FreeImage(_MPB_panes[i]);
    }

    _MPB_store = selected;

    menu_idx = mini_hold;

    UnPress(UNPRESS_ALL);

    _inMenuPartyBox = 0;

    if( cancelled ) {
        return -1;
    } else {

    }

    return party[selected];
}