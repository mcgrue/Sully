///effects.vc!
///
/// This the the home for functions referred to in datafiles, 
/// like item/spell targetting and effect functions!
///

////////////////////////////////
//  Effect-triggers!
////////////////////////////////

/// everytime a battle-actor executes an action, this gets called for them.
///
/// @see ResolveAction() The function that calls this.
void trigger_on_act( int bidx, int pidx )
{
    int i, cur_status_idx;
    string cur_status_name;
    
    for( i=0; i<bat_getStatusCount(bidx,pidx); i++ )
    {
        cur_status_name = bat_getStatus( bidx, pidx, i );

        cur_status_idx = GetStatus( cur_status_name );

        if( cur_status_idx >= 0 )
        {
            if( StatusRemovedByI(cur_status_idx, "on_act") )
            {
                bat_removeAllInstancesOfStatus( bidx, pidx, cur_status_name );
            }
        }           
    }
}

/// everytime a battle actor dies, this gets called.
/// 
/// @see EndOfBattleAction() The function that calls this.
void trigger_on_death( int bidx, int pidx )
{
    int i, cur_status_idx, doLifeline;
    string cur_status_name;
    
    for( i=0; i<bat_getStatusCount(bidx,pidx); i++ )
    {
        cur_status_name = bat_getStatus( bidx, pidx, i );

        cur_status_idx = GetStatus( cur_status_name );

        if( cur_status_idx >= 0 )
        {
            if( StatusRemovedByI(cur_status_idx, "on_death") )
            {
                bat_removeAllInstancesOfStatus( bidx, pidx, cur_status_name );
                
                /// LIFELINE status check.
                if( equ("LIFELINE",cur_status_name) )
                {
                    doLifeline = 1;
                }
            }
        }           
    }
    
    /// if there was a "lifeline" active at the time of death, we ressurect 
    /// the lucky battle actor (but only after all of the on_death effects finish!)
    if( doLifeline )
    {
        bat_revive( bidx, pidx, bat_max_hp(bidx,pidx) );
    }
}

/// every time a battle actor is revived, this gets called.
///
/// @see bat_revive() The function that calls this.
void trigger_on_life( int bidx, int pidx )
{
    int i, cur_status_idx;
    string cur_status_name;
    
    for( i=0; i<bat_getStatusCount(bidx,pidx); i++ )
    {
        cur_status_name = bat_getStatus( bidx, pidx, i );

        cur_status_idx = GetStatus( cur_status_name );

        if( cur_status_idx >= 0 )
        {
            if( StatusRemovedByI(cur_status_idx, "on_life") )
            {
                bat_removeAllInstancesOfStatus( bidx, pidx, cur_status_name );
            }
        }           
    }
}

/// everytime a player-character is involved in a resting action (sleeping at 
/// an inn, sleeping in a tent, etc) this gets called.
///
/// @see PartyRest() Calls this for the entire party.
/// @see Inn() Calls PartyRest();
void trigger_on_rest( int cast_idx )
{
    int i, j, cur_status_idx;
    string cur_status_name;
    
    for( j=0; j<GetCastStatusCount(cast_idx); i++ )
    {
        cur_status_name = GetCastStatus( cast_idx, j );

        cur_status_idx = GetStatus( cur_status_name );

        if( cur_status_idx >= 0 )
        {
            if( StatusRemovedByI(cur_status_idx, "on_rest") )
            {
                castRemoveAllStatus( cast_idx, cur_status_name );
            }
        }           
    }
}

/// everytime a battle character gets hit, this gets called for them.
///
/// @see _GAT_do_change() The function that calls this.
void trigger_on_hit( int bidx, int pidx )
{
    int i, cur_status_idx;
    string cur_status_name;
    
    for( i=0; i<bat_getStatusCount(bidx,pidx); i++ )
    {
        cur_status_name = bat_getStatus( bidx, pidx, i );

        cur_status_idx = GetStatus( cur_status_name );

        if( cur_status_idx >= 0 )
        {
            if( StatusRemovedByI(cur_status_idx, "on_hit") )
            {
                bat_removeAllInstancesOfStatus( bidx, pidx, cur_status_name );
            }
        }           
    }
}

/// This gets called for every party member (living and dead) at the end of a battle.
///
/// @see endOfBattle() The function that calls this.
void trigger_on_end( int cast_idx )
{
    int j, cur_status_idx;
    string cur_status_name;
    
    for( j=0; j<GetCastStatusCount(cast_idx); j++ )
    {
        cur_status_name = GetCastStatus( cast_idx, j );

        cur_status_idx = GetStatus( cur_status_name );

        if( cur_status_idx >= 0 )
        {
            if( StatusRemovedByI(cur_status_idx, "on_rest") )
            {
                castRemoveAllStatus( cast_idx, cur_status_name );
            }
        }           
    }
}

/// This gets called when a PARTY_NULL effect expires.
///
///
void HandleBattleQueueSpecialEffectExpiry( int q_idx )
{
    int my_ref = battle_queue[q_idx].batent_ref;
    int my_party = battle_queue[q_idx].batent_party;
    string my_data = battle_queue[q_idx].data;
    
    int status_tidx, status_bitch_tidx;
    int status_idx, status_bitch_bidx, status_bitch_pidx;
    
    if( my_party != PARTY_NULL )
    {
        ErrorHandler("HandleBattleQueueSpecialEffectExpiry(), associated party wasn't == PARTY_NULL (got: "+str(my_party)+") " );
        return;
    }
    
    loadTargettingFromString( my_data );
    status_tidx = GetTargIdxByText( "STATUS" );
    status_bitch_tidx = GetTargIdxByText( "AFFECTED" );
    
    if( status_tidx >= 0 && status_bitch_tidx >= 0 )
    {
        status_idx = GetTargID(status_tidx);
        status_bitch_bidx = GetTargID(status_bitch_tidx);
        status_bitch_pidx = GetTargMode(status_bitch_tidx);  
    }
}



////////////////////////////////
//  Custom targetting functions
////////////////////////////////

// This asks for a single party member, and requires that their (cur_hp < max_hp) and cur_hp != 0
// Uses the vc/util/targetting.vc helper functions
void HP_OC_targ_menu()
{
    int cast_idx = -2;

    while( cast_idx < -1 )
    {

        cast_idx = MenuPartyBox();

        if( cast_idx == -1 ) //we've been cancelled!
        {
            CancelTargetting();
            MenuHappyBeep();
        }
        else //we've got a valid cast_idx.  Let's check for validity!
        {
            // If this guy isn't at full HP and isn't dead, 
            // He's a valid target!
            if( master_cast[cast_idx].stats[STAT_MAX_HP] != master_cast[cast_idx].cur_hp 
                && master_cast[cast_idx].cur_hp > 0 )
            {
                AddTarget( cast_idx, 0, master_cast[cast_idx].name );
                TargettingDone();
                MenuHappyBeep();
            }
            else
            {
                cast_idx = -2; 
                MenuAngryBuzz();
                MenuPartyBoxRestorePosition();
            }
        }
    }
}


// This asks for a single party member, and requires that their (cur_mp < max_mp)
// Uses the vc/util/targetting.vc helper functions
void MP_OC_targ_menu()
{
    int cast_idx = -2;
    
    while( cast_idx < -1 )
    {
        cast_idx = MenuPartyBox();
        
        if( cast_idx == -1 ) //we've been cancelled!
        {
            CancelTargetting();
            MenuHappyBeep();
        }
        else //we've got a valid cast_idx.  Let's check for validity!
        {
            // If this guy isn't at full HP and isn't dead, 
            // He's a valid target!
            if( master_cast[cast_idx].stats[STAT_MAX_MP] != master_cast[cast_idx].cur_mp )
            {
                AddTarget( cast_idx, 0, master_cast[cast_idx].name );
                TargettingDone();
                MenuHappyBeep();
            }
            else
            {
                cast_idx = -2; //set this to 
                MenuAngryBuzz();
                MenuPartyBoxRestorePosition();
            }
        }
    }
}


// This asks for a single party member, and requires that their (cur_hp == 0)
// Uses the vc/util/targetting.vc helper functions
void DEAD_OC_targ_menu()
{
    int cast_idx = -2;
    
    while( cast_idx < -1 )
    {
        cast_idx = MenuPartyBox();
        
        if( cast_idx == -1 ) //we've been cancelled!
        {
            CancelTargetting();
            MenuHappyBeep();
        }
        else //we've got a valid cast_idx.  Let's check for validity!
        {
            // If this guy is dead, He's a valid target!
            if( 0 >= master_cast[cast_idx].cur_mp )
            {
                AddTarget( cast_idx, 0, master_cast[cast_idx].name );
                TargettingDone();
                MenuHappyBeep();
            }
            else
            {
                cast_idx = -2; //set this to 
                MenuAngryBuzz();
                MenuPartyBoxRestorePosition();
            }
        }
    }
}

// This asks for a single party member, and requires that their (cur_hp > 0)
// Uses the vc/util/targetting.vc helper functions
void LIVE_OC_targ_menu()
{
log( "LIVE_OC" );
    
    int cast_idx = -2;
    
    while( cast_idx < -1 )
    {
        cast_idx = MenuPartyBox();
        
        if( cast_idx == -1 ) //we've been cancelled!
        {
            CancelTargetting();
            MenuHappyBeep();
        }
        else //we've got a valid cast_idx.  Let's check for validity!
        {
            // If this guy is alive, He's a valid target!
            if( 0 < master_cast[cast_idx].cur_mp )
            {
                AddTarget( cast_idx, 0, master_cast[cast_idx].name );
                TargettingDone();
                MenuHappyBeep();
            }
            else
            {
                cast_idx = -2; //set this to 
                MenuAngryBuzz();
                MenuPartyBoxRestorePosition();
            }
        }
    }   
}


void pearl_use()
{
    string s;
    
    SoundHoly();
    
    if( GetTargettingCount() != 1 )
    {
        AutoText( T_SULLY, "Dear sweet vecna!  Grue, or someone altering the system, screwed something up!~How the heck did the Pearl of Truth get used on multiple people?!" );
    }
    else
    {
        s = master_cast[GetTargID(0)].name;
        
        if( equ(s,"darin") )
        {
            TextBox( T_DARIN, "Sometimes, late at night, I think unheroic","thoughts!","...I'm so ashamed." );
            
            if( CharInParty("Crystal") )
            {
                TextBox( T_CRYSTAL, "*gasp*!","","" );
            }
        }
        else if( equ(s,"dexter") )
        {
            TextBox( T_DEXTER, "This one time, at Magic Camp,","I stuck a wand up m...","" );
            TextBox( T_DARIN, "That's enough Truth from the pearl","for today, I think.","" );
        }
        else if( equ(s,"crystal") )
        {
            AutoText( T_CRYSTAL, "I am good and pure, and have never done anything wrong ever." );
            
            if( CharInParty("Darin") )
            {
                AutoText( T_DARIN, "*snort*" );
                AutoText( T_CRYSTAL, "You are *so* on the couch tonight after we save the world, mister." );
            }
        }
        else if( equ(s,"sara") )
        {
            TextBox( T_SARA, "I put a 'kick me' sign on Crystal's","back when she wasn't looking.","" );
            
            if( CharInParty("Crystal") )
            {
                TextBox( T_CRYSTAL, "WHAT?!","","" );
            }
            
            TextBox( T_SARA, "...and by 'sign' I mean 'wrote on her","robes in machine grease'.","" );
            
            if( CharInParty("Crystal") )
            {
                TextBoxM( T_CRYSTAL, "...","","" );
                TextBoxM( T_CRYSTAL, "...you gonna die, bitch!","","" );
            }           
        }
        else if( equ(s,"galfrey") )
        {
            TextBoxM( T_GALFREY, "...","","" );
            Autotext( T_GALFREY, "...sometimes... when I get nervous... I put my fingers under my armpits, and then I sniff'm." );
            
            if( CharInParty("Crystal") )
            {
                Autotext( T_CRYSTAL, "Eww!" );
                Autotext( T_GALFREY, "...Hey.  If you didn't want to hear it, you shouldn't've handed me the Pearl." );
            }
        }
        else
        {
            AutoText( T_SULLY, "We're looking for a guy named '"+s+"'.  Anyone by that name here?  No?  Bummer."  );
        }       
    }
}


void worldmap_use()
{
    MenuPageTurn();
    
    TextBox( T_STAN, "I have cursed this map!","No location for YOU!","Mwahahaha!" );
}

void long_piece_use()
{
    TextBox( T_DARIN, "What... does this do again?","", "" );
    TextBox( T_LANCE, "It opens that funny door partway","up Mount Jujube!","" );
    TextBox( T_LANCE, "Come on.  We're so close to","that Dwarf Village I can","taste it!" );
}

void gswitch_use()
{
    int idx = IsItem( "Golden_Switch" );
    
    if( !Flags[F_GSWITCH] )
    {
        TextBox( T_DARIN, "Wow!  A real golden switch!","And it even flips on and off!","" );
    }
    
    if( master_items[idx].icon == 43 )
    {
        master_items[idx].icon == 44;
    }
    else
    {
        master_items[idx].icon == 43;
    }
    
    SoundSwitch();
    Unpress( 0 );
    
    Flags[F_GSWITCH]++;
}



void starlight_use()
{
    int user_idx, target_idx;

    if( !IsInBattle() )
    {
        starlight_use_MENU();
    }
    else
    {
        user_idx = GetTargIdxByText( "Attacker" );
        target_idx = GetTargIdxByText( "Target" );
        
        /// this battle effect retargets if the former target was dead.
        AttemptSingleLivingRetarget();
        
        AddGATTACA( 
            GetTargID(target_idx), 
            GetTargMode(target_idx),
            BS_CHANGE_MP, 
            15
        );
        
        TurnBattleEffectOff( 1 );
    }
}

void herb_use() 
{
    int user_idx, target_idx;

    if( !IsInBattle() )
    {
        herb_use_MENU();
    }
    else
    {
Log( "herb_use" );
        user_idx = GetTargIdxByText( "Attacker" );
        target_idx = GetTargIdxByText( "Target" );
        
        /// this battle effect retargets if the former target was dead.
        AttemptSingleLivingRetarget();
        
        AddGATTACA( 
            GetTargID(target_idx), 
            GetTargMode(target_idx),
            BS_CHANGE_HP, 
            30
        );
        
        TurnBattleEffectOn( "healy_sparkles" );
        
Log( "herb_use end" );
    }
}


/// 2x attacks!
///
void skill_swd_sworddance() {

}

/// Let's heal 1.5*Magic Power +/- 10%.
///
void skill_wm_heal()
{
    int user_idx, target_idx;
    int amt, tmp;

    if( !IsInBattle() )
    {
MessageBox( "Please implement for the menu." );
    }
    else
    {
        user_idx = GetTargIdxByText( "Attacker" );
        target_idx = GetTargIdxByText( "Target" );
        
        /// this battle effect retargets if the former target was dead.
        AttemptSingleLivingRetarget();
        
        amt = bat_mag( GetTargID(user_idx), GetTargMode(user_idx) ) * 3;
        amt = amt / 2;
        
        tmp = amt/10;
        amt += Random(0-tmp, 0+tmp);
        if( amt < 0 )
        {
            amt = 1;
        }
        
        AddGATTACA( 
            GetTargID(target_idx), 
            GetTargMode(target_idx),
            BS_CHANGE_HP, 
            amt
        );
        
        TurnBattleEffectOn( "healy_sparkles" );
        
Log( "skill_wm_heal end" );
    }
}


/// Revive a fallen ally with 25% HP.
///
void skill_wm_revive()
{
    int user_idx, target_idx;
    int amt, tmp;

    if( !IsInBattle() ) {
MessageBox( "Please implement for the menu." );
        return;
    }

    target_idx = GetTargIdxByText( "Target" );

    if( !bat_is_dead( GetTargID(target_idx), GetTargMode(target_idx) ) ) {
        TurnBattleEffectOn( "skill_fizzle" );
        return;
    }

    amt = bat_max_hp( GetTargID(target_idx), GetTargMode(target_idx) );
    amt = amt / 4; // dividing by 4 is 25%
    if (amt <= 0) amt = 1; // well, it's possible.

    AddGATTACA( 
        GetTargID(target_idx), 
        GetTargMode(target_idx),
        BS_CHANGE_NONE, 
        -1
    );

    NewBounceText( 
        GetTargID(target_idx),
        GetTargMode(target_idx),
        str(amt), 
        BOUNCETEXT_GREEN,
        1
    );

    bat_revive( 
        GetTargID(target_idx),
        GetTargMode(target_idx),
        amt 
    );

    TurnBattleEffectOn( "holy_light" );
}

void skill_wm_shield() {

    if( !IsInBattle() ) {
        return;        
    }

    int target_idx = GetTargIdxByText( "Target" );

    if( bat_is_dead( GetTargID(target_idx), GetTargMode(target_idx) ) ) {
        TurnBattleEffectOn( "skill_fizzle" );
        return;
    }

    bat_addStatus( GetTargID(target_idx), GetTargMode(target_idx), "Protect" );

    MessageBox( "So, there's totally no implemented duration-handling for status yet.  Enjoy your infini-shield." );
    
    AddGATTACA_ArbitraryString( 
        GetTargID(target_idx), 
        GetTargMode(target_idx),
        "Protect", 
        BOUNCETEXT_WHITE
    );


    __fx__offs_x = -24;
    __fx__offs_y = -4;
    //standard_effect_oncomplete = "protecty_shield_oncomplete";
    TurnBattleEffectOn( "protecty_shield" );
}

void skill_wm_invis() {
    if(!IsInBattle() ) {
        battle_avoidance = 100;
        SoundTwinkle();
    }
    else {
        MessageBox("You're not supposed to use this in battle! Oh god, now look what you did!");
    }
}





#include "vc/standard_effect.vc"

void healy_sparkles()
{
    standard_effect(
        "res\sfx\MAGIC.WAV", 103,
        "res\battle\effects\sparkle-green.pcx", 32, 32
    );
}

void holy_light()
{
    standard_effect(
        "res\sfx\sun.wav", 249,
        "res\battle\effects\revive.pcx", 24, 48
    );
}

void protecty_shield() {
    standard_effect(
        "res\sfx\charge.wav", 64,
        "res\battle\effects\shield.pcx", 16, 32
    );
}



void skill_fizzle() {
    MessageBox( "Well, do some kind of fizzle sound and disappointed frame if a spell fizzles." );
}

void medicine_use()
{
    if( !IsInBattle() )
    {
        medicine_use_MENU();
    }
}

void brew_use()
{
    if( !IsInBattle() )
    {
        brew_use_MENU();
    }
}











//heal 15 MP
void starlight_use_MENU()
{
    int i;
    SoundHoly();
    
    for(i=0; i<GetTargettingCount(); i++)
    {
        HealMP( GetTargID(i), 15 );
    }
}


void herb_use_MENU()
{
    int i;
    SoundEat();
    
    for(i=0; i<GetTargettingCount(); i++)
    {
        HealHP( GetTargID(i), 30 );
    }   
}

void medicine_use_MENU()
{
    int i;
    
    SoundDrink();
    
    for(i=0; i<GetTargettingCount(); i++)
    {
        HealHP( GetTargID(i), 90 );
    }   
}


void brew_use_MENU()
{
    int i;
    
    SoundDrink();
    
    for(i=0; i<GetTargettingCount(); i++)
    {
        if( master_cast[GetTargID(i)].cur_hp == 0 )
        {
            HealHP( GetTargID(i), 1 );
        }
    }   
}