
int __current_menu_idx;

int __current_targ_batact_delay;

/// set how long to shove this new action into the battle queue for!
void SetTargettedActionDelay( int delay )
{
    if( delay == 0 ) {
        delay = 1;
    }

    __current_targ_batact_delay = delay;
}

/// return how long to shove this new action into the battle queue for!
int GetTargettedActionDelay()
{
    return __current_targ_batact_delay;
}


void ExecuteLoveUniversal()
{
    ClearTargetting();
    targetting_success = TARG_SUCCESS;
    AddTarget( battle_queue[0].batent_ref, PARTY_ALLY, "Attacker" );
}


void ExecuteLove( string _key )
{
    //cur_level
    Log( "ExecuteLove( "+_key+" )" );
    Log( "Current Level: " + str(master_battle_menus[__current_menu_idx].cur_level) );
    
    if( equ(getCurrentlySelectedPageItem(), "Items") ) {
        ExecuteLoveItem( _key );
        return;
    }
    else if( IsSkill(_key) )
    {
        ExecuteLoveSkill( _key );
    } 
    else
    {
        ExecuteLoveSpecial( _key );
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

void ExecuteLoveItem( string _key )
{
    int i;

    i = IsItem( _key );
    
    if( i < 0 )
    {
        ErrorHandler( "ExecuteLoveItem: '"+_key+"' is not a valid item." );
        return;
    }
    
    /// 1. Make sure this item is usable in battle. 
    if( !CheckItemUseflagI(i,USE_BATTLE) )
    {
        ErrorHandler( "ExecuteLoveItem: '"+_key+"' is not usable in battle." );
        return; 
    }
    
    /// 1a. Make sure the targetting callfunc exists! (onoes!)
    if( !FunctionExists(GetItemTargFunc(i)) )
    {
        ErrorHandler( "ExecuteLoveItem: '"+_key+"'s targetting function ("+GetItemTargFunc(i)+") does not exist!" );
        return;     
    }
    
    /// 1b. Make sure the item is in inventory! (change thias if we want to genericize it for multiple inventories)
    if( !HasItemI(i) )
    {
        ErrorHandler( "ExecuteLoveItem: '"+_key+" is not in the party's inventory." );
        return;         
    }

    /// 2. Set the targetting cursor to the item's icon.
    set_selectmap_cursor_image( icon_get(GetItemIconIdx(i)) );
    
    /// 3. Pause the battle menu.  
    PauseBattleMenu();
    
    /// 3.5. setup the Targetting library...
    ExecuteLoveUniversal();
    
    /// 3.5.5 setup the Item's effect function (it'd be nice if it did something when it's all said and done...)
    SetTargettingEffectFunc( GetItemEffectFunc(i) );
    
    /// 3.6. set how long it'll take to do this action
    SetTargettedActionDelay( GetSkillDelayTime(GetSkill("__Item")) );
    

    /// 3.10 set the "decrement this item when used" device.
    SetTargettingItemDecr( i );

    /// 4. Place the targetting callfunc into the battle renderstack container for 
    ///    the targetting callfunc.
    ///    The callfunc will handle unpausing the menu if cancelled out, and handle 
    ///    committing the new action to the action queue if valid accepting happens.
    SetActiveBattleMenuTargetting( GetItemTargFunc(i) );
}

/// the private variable for the inventory-decrementing device 
///
int __targItemIdx = -1;

/// returns true if there's an item set to be removed from tha party's inventory 
/// by any action being set at the time it's invoked.
///
int HasTargettingItemDecr() 
{
    if( __targItemIdx > 0 )
    {
        return 1;
    }
    
    return 0;
}

/// turns on the inventory-decrementing device for items.
///
void SetTargettingItemDecr( int item_idx ) 
{
Log( "SetTargettingItemDecr( "+str(item_idx)+" )" );

    __targItemIdx = item_idx;
}

/// turns off the inventory-decrementing device for items.
///
void UnsetTargettingItemDecr() 
{
    __targItemIdx = -1;
}


/// Actually removes the item from the party's inventory.  Yay.
/// Turns off the system after it executes. 
/// Errors if the item referenced by the system doesn't exist in inventory.  Boo.
void DecrementTargettingItem()
{
    if( HasTargettingItemDecr() )
    {
        if( !HasItemI(__targItemIdx) )
        {
            UnsetTargettingItemDecr();
            ErrorHandler( "DecrementTargettingItem: '"+GetItemNameI(__targItemIdx)+" is not in the party's inventory.  Unsetting ItemDecr mode." );
            return; 
        }
        
        TakeItemI( __targItemIdx, 1 );
        
        UnsetTargettingItemDecr();
    }
}


/// Gives back all items that are in the middle of being used in the action queue.
/// Mainly to be called at the end of a battle.
///
/// WARNING: alters the targetting array, so you'd best save targetting data if you need to beforehand!
///
void grantback_pendinguse_items_from_battle_actionqueue()
{
    int i, itemUse;
    for( i=0; i<battle_queue_count; i++ )
    {
        LoadTargettingFromString( battle_queue[i].data );
        
        itemUse = GetTargIdxByText( "ITEM_DELETE" );
        if( itemUse >= 0 )
        {
            GiveItemI( GetTargID(itemUse), 1 );
        }
    }
}






//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

void ExecuteLoveSkill( string _key )
{
    int i, user_idx;
    
    user_idx = battle_queue[0].batent_ref;
    
    i = GetSkill( _key );
    
    if( i < 0 )
    {
        ErrorHandler( "ExecuteLoveSkill: '"+_key+"' is not a valid skill." );
        return;
    }
    
    /// 1. Make sure this item is usable in battle. 
    if( !CheckSkillUseflagI(i,USE_BATTLE) )
    {
        ErrorHandler( "ExecuteLoveSkill: '"+_key+"' is not usable in battle." );
        return; 
    }
    
    /// 1a. Make sure the targetting callfunc exists! (onoes!)
    if( !FunctionExists(GetSkillTargFunc(i)) )
    {
        ErrorHandler( "ExecuteLoveSkill: '"+_key+"'s targetting function ("+GetSkillTargFunc(i)+") does not exist!" );
        DumpSkill( i );
        return;     
    }
    
    /// 1b. Does this skill, for some unknowable reason, have a negative MP cost?
    if( GetSkillMpCostI(i) < 0 )
    {
        ErrorHandler( "ExecuteLoveSkill: '"+_key+"'s mp_cost was negative. ("+str(GetSkillMpCostI(i))+")" );
        return;         
    }
    
    
    /// 1c. does this user, for some equally unknowble reason, not have the MP to use this skill?
    /// (we never should've gotten this far if that were the case.)
    if( GetSkillMpCostI(i) > bat_cur_mp(user_idx, PARTY_ALLY) )
    {
        ErrorHandler( "ExecuteLoveSkill: '"+_key+"'s mp_cost ("+str(GetSkillMpCostI(i))+") was higher than the party member's current mp ("+str(bat_cur_mp(user_idx, PARTY_ALLY))+"). That should never happen by this point, really." );
        return; 
    }
    
    /// 2-a. Turn on the MP Use flaggy thingy.
    SetTargettingSkillMPDecr( GetSkillMpCostI(i) );

    /// new step: make sure the skill has a valid target!
    //Exit( "BOOGA TACO FLOOP: how about we make sure the skill can have a valid target before turning off the menu?  If it doesn't, do a buzz and send a battle message along the lines of 'lol, no valid targets.'" );

    /// 2. Set the targetting cursor to the item's icon.
    set_selectmap_cursor_image( icon_get(GetSkillParentTypeIconIdx(i)) );
    
    /// 3. Pause the battle menu.  
    PauseBattleMenu();

    /// 3.5. setup the Targetting library...
    ExecuteLoveUniversal();

    /// 3.5.5 setup the Skill's effect function (it'd be nice if it did something when it's all said and done...)
    SetTargettingEffectFunc( GetSkillEffectFunc(i) );

    /// 3.5.6 if the skill is reflectable, tell the targetting array that.
    if( IsSkillReflectable(i) )
        SetTargettingSkillReflectable();
    
    /// 3.5.7 if the skill is nullable, tell the targetting array that.
    if( IsSkillNullable(i) )
        SetTargettingSkillNullable();
    
    /// 3.6. set how long it'll take to do this action
    /// (Skills have their own charge time... so fetch it! )
    SetTargettedActionDelay( GetSkillChargeTime(i) );

    /// 4. Place the targetting callfunc into the battle renderstack container for 
    ///    the targetting callfunc.
    ///    The callfunc will handle unpausing the menu if cancelled out, and handle 
    ///    committing the new action to the action queue if valid accepting happens.
    SetActiveBattleMenuTargetting( GetSkillTargFunc(i) );
}

int __targSkillMPCost = -1;
int __targSkillReflec = -1;
int __targSkillNullab = -1;

int HasTargettingSkillMPDecr()
{
    if( __targSkillMPCost >= 0 ) 
        return 1;
    
    return 0;
}

void SetTargettingSkillMPDecr( int i )
{
    __targSkillMPCost = i;
}

void UnsetTargettingSkillMPDecr() 
{
    __targSkillMPCost = -1;
}


void SetTargettingSkillReflectable() {
    __targSkillReflec = 1;
}

void SetTargettingSkillNullable() {
    __targSkillNullab = 1;
}

void UnsetTargettingSkillReflectable() {
    __targSkillReflec = -1;
}

void UnsetTargettingSkillNullable() {
    __targSkillNullab = -1;
}

int HasTargettingSkillReflectable() {
    if( __targSkillReflec >= 0 ) 
        return 1;
    
    return 0;
}

int HasTargettingSkillNullable() {
    if( __targSkillNullab >= 0 ) 
        return 1;
    
    return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

void ExecuteLoveSpecial( string _key )
{
    /// Attack
    /// Defend
    /// Meditate
    /// Parry
    /// Run

    if( equ(_key,"Attack") )
    {
        DoBasicAttack();
    }
    else if( equ(_key, "Defend") )
    {
        DoSimpleSelfEffect( "SimpleDefendResolver", GetSkillDelayTime(GetSkill("__Defend")) );
    }
    else if( equ(_key, "Meditate") )
    {
        DoSimpleSelfEffect( "SimpleMeditateResolver", GetSkillDelayTime(GetSkill("Meditate")) );
    }
    else if( equ(_key, "Parry") )
    {
        DoSimpleSelfEffect( "SimpleParryResolver", GetSkillDelayTime(GetSkill("__Defend")) );
    }
    else if( equ(_key, "Run") )
    {
        DoSimpleSelfEffect( "SimpleRunResolver", 30 );
    }
    else
    {
        ErrorHandler( "Execute_Love.vc::ExecuteLoveSpecial(): '"+_key+"' is an unknown special battle action." );
    }
}


string __BM_called_targetting_func;
int __BM_called_targetting_func_on;

void BM_SetTargettingFunction( string callfunc )
{
    if( FunctionExists(callfunc) )
    {
        __BM_called_targetting_func = callfunc;
        __BM_called_targetting_func_on = 1;
    }
    else
    {
        ErrorHandler( "BM_SetTargettingFunction(), error: '"+callfunc+"' is not a valid function." );
        __BM_called_targetting_func_on = 0;
    }
}

string BM_GetTargettingFunction() {
    return __BM_called_targetting_func;
}

int BM_InTargettingMode() {
    return __BM_called_targetting_func_on;
}

void BM_TargettingModeOff() {
    __BM_called_targetting_func = "";
    __BM_called_targetting_func_on = 0;
}


/// called by the targetting functions when they've successfully captured an action.
/// saves that action to the battle queue and forwards the good cause.
void CommitBattleMenuChoice()
{
    BM_TargettingModeOff();
    TurnBattleMenuOff();
    BattleMenuTargettingOff();

    add_battle_queue_entry( 
        GetTargettedActionDelay(), 
        battle_queue[0].batent_ref, 
        battle_queue[0].batent_party, 
        BACT_CHARGE, 
        saveTargettingToString() 
    );
    
    pop_battle_queue();
}

/// sets _resolvefunc as the effect's callfunc, 
/// the targetting array to only the current battle actor,
/// at the given delay, and commits it to the queue as a Charging action.
///
/// if _delay is negative, it becomes the default delay.  If it's greater than the max
/// delay, it becomes the max delay.
///
/// This function does nothing involving Tom DeLay.
void DoSimpleSelfEffect( string _resolvefunc, int _delay )
{
    ExecuteLoveUniversal();
    
    if( _delay < 0 )
        _delay = BASE_DELAY;
    else if( _delay > MAX_DELAY )
        _delay = MAX_DELAY;
    else if( _delay == 0 ) 
        _delay = 1;
    
    SetTargettedActionDelay( _delay );
    SetActiveBattleMenuTargetting( _resolvefunc );
    
    CommitBattleMenuChoice();
}
