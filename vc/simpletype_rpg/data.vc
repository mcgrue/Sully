// Data.vc, datatype definitions for the Simpletype RPG Subsystems Library
//
// by McGrue
// Started 2004.08.30
/////////////////////////////////////////////////////////////////////////
// Best viewed with tab of 4 in a text-editor with syntax-highlighted vc
/////////////////////////////////////////////////////////////////////////
// These are the master arrays of structs that the datafiles parse into.
//
// The Load/Save system alters none of them *except* master_cast[], for
// reasons that I hope are obvious.
//
// Accessor functions might be a nice revision to add for all these member
// variables, based on index, but were left out of this verion.
//
/////////////////////////////////////////////////////////////////////////


// The directory that general-datafiles live in.
string dat_directory        = "res/data/";

// The directory that cast-datafiles live in.
string cast_dat_directory   = "res/data/Cast/";

// The directory that .chr files live in.
string chr_dir          = "res/chrs/";

string sprfile_dir      = "res/images/sprites/";

// These define the maximum number of entries in specific datafiles.
// If you alter datafiles too much, you may want to increase these values
#define MAX_SKILLTYPES      20
#define MAX_CLASSES     10
#define MAX_SKILLS      200
#define MAX_CAST        10
#define MAX_ITEMS       800

// These are the maximums for Max HP, Max MP, and all other stats.
// Enemies are bound to the normal stat maximums, but not the HP/MP maximums.
#define MAXIMUM_HP_VALUE    999
#define MAXIMUM_MP_VALUE    999
#define MAXIMUM_STAT_VALUE  999

// the maximum number of skillgroups a single class can have
#define MAX_SKILLGROUPS_PER_CLASS   4

// maxhp   maxmp   str    end    mag   mgr    hit%   dod%   stk   fer  rea ctr
//
// The growable stats are the ones that can be altered by level-gain as defined in the
// growth tables of a specific cast member's datafile.
//
// The non-growable stats are ATT and DEF.
#define MAX_GROWABLE_STATS  12
#define MAX_STATS           14

// the maximum level attainable.  minimum is 1.
#define MAX_LEVELS  50
#define HEAL_ON_LEVELUP 0 // Character regains full HP/MP when he levels if this is true.

//USEFLAG DEFINES - Bit positions for item/spell use
// ie, something battle-only is 1, menu-only is 2, and both is 3.
#define USE_BATTLE  1
#define USE_MENU    2


//EQUIP SLOT DEFINES - indices for equipment arrays.
#define SLOT_RHAND  0
#define SLOT_LHAND  1
#define SLOT_BODY   2
#define SLOT_ACC1   3
#define SLOT_ACC2   4
// left-hand, right-hand, body, acc1, acc2
#define MAX_EQUIP_SLOTS 5


//UNEQUIP ALLOWANCE DEFINES - set to false to disallow unequipping from the
// specified slot. Changing what's equipped is still allowed, of course.
// Be warned that characters still start with nothing in the slot, so setting
// these to false isn't a guarantee that the slot will be filled.
// If you set these to 0 it forces a character to keep some weapon and armor
// equipped once he has something there in the first place. This is useful
// because the game uses a slightly peculiar kludge for handling characters
// with no weapon or armor.
#define UNEQUIP_WEAPON_OK 1
#define UNEQUIP_ARMOR_OK 1

// ELEMENT RESISTANCE DEFINES - indices for lists of elemental resistances
#define ABSORB_ELEMENT 0
#define NEGATE_ELEMENT 1
#define HALVE_ELEMENT 2
#define DOUBLE_ELEMENT 3
#define MAX_RESISTS 4


//STAT DEFINES - indexes for growable-stats arrays.
#define STAT_MAX_HP 0
#define STAT_MAX_MP 1
#define STAT_STR    2
#define STAT_END    3
#define STAT_MAG    4
#define STAT_MGR    5
#define STAT_HIT    6
#define STAT_DOD    7
#define STAT_STK    8
#define STAT_FER    9
#define STAT_REA    10
#define STAT_CTR    11

//additional indexes for total-stats arrays.
#define STAT_ATK    12
#define STAT_DEF    13

/// a global array of ints and one of strings for use in functions,
/// since you can't have local arrays in mapfunctions.
/// Also useful scratch.  This data is by definition *not* saved...
/// it's just a small playground of scratch space!
#define MAX_SCRATCH 1000

// General temp vars
int     arTemp[MAX_SCRATCH];
string  arTempStr[MAX_SCRATCH];

// These vars are used by maps specifically. Don't use them outside
// the context of map scripting or the maps might screw up.
// Unlike the normal temp array, these ARE saved.
int     arMapTemp[MAX_SCRATCH];

/// sorts the arTemp array from start_idx to end_idx, inclusive.
/// there is no errorchecking on this.  Be careful!
/// presently a bubble sort.
void sortArTemp( int start_idx, int end_idx )
{

//Log( "sorting ["+str(start_idx)+"] through ["+str(end_idx)+"]" );

    int i,j, lowest_idx, tmp;

    for( i=start_idx; i<end_idx+1; i++ )
    {
        lowest_idx = i;

        for( j=i+1; j<end_idx+1; j++ )
        {
            if( arTemp[j] < arTemp[lowest_idx] )
                lowest_idx = j;
        }

        tmp = arTemp[i];
        arTemp[i] = arTemp[lowest_idx];
        arTemp[lowest_idx] = tmp;
    }
}

///////////////////////////////////////////////////////////////////////////////
// SkillType
///////////////////////////////////////////////////////////////////////////////
//
// this struct holds the data for a family of skills
//
// IE: White Magic, Black Magic, Karate, Swordtech, Gambling... anything you want.
//
struct SkillType {
    string  name; //remember to make sure names are unique.
    string  desc; //the description string.
    int     icon; //the index of the icon in the iconfile. (see icons.vc)

    int visibility; //the visibility mode for this skilltype's known children

    /// a comma-seperated list of all status ailments that, if present in the character that has
    /// this given SkillType, disables the use of any skills of this skilltype while it's around.
    ///
    /// Like if this skilltype was "Magic" you'd see shit like "Mute" or "Silence" in here.  Dig?
    string  disabling_status_ailments;
}

//the master array of skilltypes
SkillType master_skilltypes[MAX_SKILLTYPES];

#define ST_VISI_NORMAL  0
#define ST_VISI_HIDDEN  1
#define ST_VISI_MENU    2


///////////////////////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////////////////////
//
// this struct holds the data for a specific character class.
//
// IE: Knight, White Mage, Guru, Funkmaster, etc...
//
struct Class {
    string  name; //names must be unique
    string  desc; //the description string
    int     icon; //the index of the icon in the iconfile. (see icons.vc)
    int     skill_groups[MAX_SKILLGROUPS_PER_CLASS];
}

//the master array of classes
Class master_classes[MAX_CLASSES];



///////////////////////////////////////////////////////////////////////////////
// Skill
///////////////////////////////////////////////////////////////////////////////
// this struct holds the data for specific skills
//
// IE: Fire, Cure, Aim, Slice
//
struct Skill {
    string  name;       //make sure this is unique.
    string  desc;       //description string
    int     icon;       //icon reference
    int     use_flag;   //can this skill be used from menus, battle, or both?
    string  target_func;    //the callfunc for the skill's targetting.
    string  effect_func;    //the callfunc for the skill's effect.
    int     mp_cost;    //the MP cost to use this skill.  Can be 0.
    int     type;       //index reference to the master_skilltypes array (see above)

    int charge_time;    //how long does this skill charge for. (charge is the period between choosing it on your character's turn and it's actual execution.)
    int delay_time; //how long does this skill delay your character after it executes?

    int is_reflectable; //is this skill 'reflectable'?
    int is_nullable;    //is this skill 'nullable'?
}


//the master array of skills
Skill master_skills[MAX_SKILLS];

///////////////////////////////////////////////////////////////////////////////
// Cast
///////////////////////////////////////////////////////////////////////////////
//
// this struct holds the data for specific cast members and their specifics.
//
// this is probably the master-array you will deal with the most, unless you're a
// wacky systems coder.
//
struct Cast {
    string  name;       //The name is a second unique identifier for this character.
    string  desc;       //description.

    string  chrname;        //relative path and filename of this cast member's chr.
    string  overworld_chrname;  //relative path and filename of this cast member's ovrworld chr.

    int entity;     //the entity reference of this character on the current map!
                //
                //NOTE: this system only sets this to the mapentity reference when
                //      SpawnParty() or AddPlayer() are called.  Please refer to the
                //      Party.vc docs on their proper usage.

    int portrait_idx;   //the speech portrait index for this character.
                // NOTE: these are presently set by the completely hacky
                //       initSpeechPortsInData() in the Sully system.vc file.
                //       It is advised that any future revisions include this index
                //       in the datafile.

    string  battle_sprite;  //the sprite definition filename for the battle sprite of this
                //character.  (stored in the sprite definition file directory,
                //no need to put the path in.)

    int icon;       //the image index of the icon for this PC.  Used mainly in the battle system.

    int mcgrender_heap_ref;     //the index of the actual battle renderengine entry for this character in battle
    int mcg_sprite_battle_ref;  //the index of the sprite entry in mcgrender for this character in battle

    int class_ref;  //index reference to the master_classes[] array.



    int level;      // the level of this cast member. Obvious, no?
    int exp;        // the experience point total of this cast member.
    int cur_hp, cur_mp; // current HP and MP.


    int stats[MAX_STATS];   //the current stats for this cast member
                    //refer to STAT_MAX_HP through STAT_DEF for index defines for this array.


    int stat_growth[MAX_LEVELS][MAX_GROWABLE_STATS];
                //the stat-growth table for this character.
                //refer to STAT_MAX_HP through STAT_REA for index defines for this array.


    int exp_require[MAX_LEVELS];    //the XP requirements for each level for this character


    int equipment[MAX_EQUIP_SLOTS]; //the equipment slots for this character
                        //contains master_items[] references for each slot.
                        //-1 if nothing is in that slot


    int skills[MAX_SKILLS]; //the skills this cast member knows.
                    //contains master_skills[] references for each slot.

    int skillcount; //the count of skills this cast member currently has in his skills[] array.

    int battle_menu_idx;    //the index to this cast member's current battle menu
    int battle_menu_dirty;  //a flag denoting whether or not this character needs to have their battle menu string regenerated.

    string condition; // The character's current status, in comma-delimited string form. Doesn't include durations since those only apply in battles.


    /// The following formatted strings are not saved by the
    string e_immune;        // Comma-delimited list of immune statuses granted by equipment
    string e_auto;          // Comma-delimited list of automatic statuses granted by equipment
    string e_resist[MAX_RESISTS];   // Comma-delimited lists of elemental affinities granted by equipment
    string e_element;       // Comma-delimited list of elements attached to weapon attacks granted by equipment.

    string o_immune;        // Comma-delimited list of immune statuses granted by non-equipment sources.  It is cleared after every battle.
    string o_auto;          // Comma-delimited list of automatic statuses granted by non-equipment sources.  It is cleared after every battle.
    string o_resist[MAX_RESISTS];   // Comma-delimited lists of elemental affinities granted by non-equipment sources.  It is cleared after every battle.
    string o_element;       // Comma-delimited list of elements attached to weapon attacks granted by non-equipment sources.  It is cleared after every battle.


    int dead_flag;  /// a flag that's raised if the PC's dead or not.  Mainly to make sure on_death() triggers aren't called multiple, inappropriate times.
}

Cast master_cast[MAX_CAST]; //the master array of cast members.


///////////////////////////////////////////////////////////////////////////////
// Item
///////////////////////////////////////////////////////////////////////////////
//
// this struct holds the data for all items, be they supplies, equipment, or key
//
struct Item {
    string  name;   //name.  Must be unique.
    string  desc;   //description.  FLUFF.
    int icon;   //index to icon
    int price;  //base price for the item.  value of zero or less prevents sale.

    int use_flag;   //specifies if it can be used in battle, menu, or both.

    string  target_func;    //the name of the function that deals with targetting for this
    string  effect_func;    //the name of the function that deals with effect resolution.

    int equ_classes[MAX_CLASSES]; //master_class[] index references to the classes that can equip this item

    int equ_slot;   //the slot this equipment can be put in.
    string  equ_modcode;    //a special string representing what happens when this equipment is put on or taken off.

    string equ_immune;      // Comma-delimited list of immune statuses granted by equipment
    string equ_auto;        // Comma-delimited list of automatic statuses granted by equipment

    string equ_resist[MAX_RESISTS]; // Comma-delimited lists of elemental affinities granted by equipment
    string equ_element;     // Comma-delimited list of elements attached to weapon attacks granted by equipment.
}

//the master array of items.
Item master_items[MAX_ITEMS];
int item_count;


// Load Zip's Awesome (Yet Scary) Dataparsers!
//
#include "vc/simpletype_rpg/parser/flags.vc"            // Zip
#include "vc/simpletype_rpg/parser/data_front.vc"       // Zip
#include "vc/simpletype_rpg/parser/data_load.vc"        // Zip

// Load the rest of the RPG Subsystems
//
#include "vc/simpletype_rpg/inventory.vc"   // Grue
#include "vc/simpletype_rpg/equipment.vc"   // Grue
#include "vc/simpletype_rpg/cast.vc"        // Grue
#include "vc/simpletype_rpg/party.vc"       // Grue
#include "vc/simpletype_rpg/item.vc"        // Grue
#include "vc/simpletype_rpg/skills.vc"      // Grue
#include "vc/simpletype_rpg/enemy.vc"       // Gayo
#include "vc/simpletype_rpg/status.vc"      // Gayo


void debugItem( int idx )
{
    int i;

    string classes;


    log( "" );
    log( "==============================" );
    log( "debugItem( "+str(idx)+" )" );
    log( "==============================" );

    if( idx < 0 || idx > MAX_ITEMS )
    {
        log( str(idx)+" is an invalid index.  master_items[] has a valid range of 0 through " + str(MAX_ITEMS) );
    }
    else
    {
        log( "       master_items["+str(idx)+"].name: " + master_items[idx].name );
        log( "       master_items["+str(idx)+"].desc: " + master_items[idx].desc );
        log( "       master_items["+str(idx)+"].icon: " + str(master_items[idx].icon) );
        log( "   master_items["+str(idx)+"].use_flag: " + str(master_items[idx].use_flag) );
        log( "master_items["+str(idx)+"].target_func: " + master_items[idx].target_func );
        log( "master_items["+str(idx)+"].effect_func: " + master_items[idx].effect_func );
        log( "   master_items["+str(idx)+"].equ_slot: " + str(master_items[idx].equ_slot) );
        log( "master_items["+str(idx)+"].equ_modcode: " + master_items[idx].equ_modcode );


        for( i=0; i<MAX_CLASSES; i++ )
        {
            if( master_items[idx].equ_classes[i] > 0 )
            {
                if( equ(classes,"") )
                {
                    classes = str(master_items[idx].equ_classes[i]);
                }
                else
                {
                    classes = classes + "," + str(master_items[idx].equ_classes[i]);
                }
            }
        }

        log( "    master_items["+str(idx)+"].classes: " + classes );

        if( !equ( master_items[idx].equ_element,"") )
            log( "This item grants the following elements to attacks: '"+master_items[idx].equ_element+"'" );
        if( !equ( master_items[idx].equ_immune,"") )
            log( "This item grants immunity to the following statuses: '"+master_items[idx].equ_immune+"'" );
        if( !equ( master_items[idx].equ_auto,"") )
            log( "This item automatically grants the following statuses: '"+master_items[idx].equ_auto+"'" );

        for( i=0; i<MAX_RESISTS; i++ )
        {
            if( !equ( master_items[idx].equ_resist[i],"") )
                log( "This item grants elemental["+GetResistName(i)+"] for: '"+master_items[idx].equ_resist[i]+"'" );
        }

    }

    log( "==============================" );
}

void debugAllItems()
{
    int i;

    for( i=0; i<item_count; i++ )
        debugItem( i );
}

string getBattleSprite(int idx) {
    return master_cast[idx].battle_sprite;
}

void debugCast( int idx )
{
    int i;


    log( "" );
    log( "==============================" );
    log( "debugCast( "+str(idx)+" )" );
    log( "==============================" );

    if( idx < 0 || idx > MAX_CAST )
    {
        log( str(idx)+" is an invalid index.  master_cast[] has a valid range of 0 through " + str(MAX_CAST) );
    }
    else
    {
        log( "                 master_cast["+str(idx)+"].name: " + master_cast[idx].name );
        log( "                 master_cast["+str(idx)+"].desc: " + master_cast[idx].desc );
        log( "              master_cast["+str(idx)+"].chrname: " + master_cast[idx].chrname );
        log( "    master_cast["+str(idx)+"].overworld_chrname: " + master_cast[idx].overworld_chrname );
        log( "               master_cast["+str(idx)+"].entity: " + str(master_cast[idx].entity) );
        log( "         master_cast["+str(idx)+"].portrait_idx: " + str(master_cast[idx].portrait_idx) );
        log( "        master_cast["+str(idx)+"].battle_sprite: " + master_cast[idx].battle_sprite );
        log( "                 master_cast["+str(idx)+"].icon: " + str(master_cast[idx].icon) );
        log( "master_cast["+str(idx)+"].mcg_sprite_battle_ref: " + str(master_cast[idx].mcg_sprite_battle_ref) );

        log( "                master_cast["+str(idx)+"].class: " + master_classes[master_cast[idx].class_ref].name );
        log( "                master_cast["+str(idx)+"].level: " + str(master_cast[idx].level) );
        log( "                  master_cast["+str(idx)+"].exp: " + str(master_cast[idx].exp) );
        log( "               master_cast["+str(idx)+"].cur_hp: " + str(master_cast[idx].cur_hp) );
        log( "               master_cast["+str(idx)+"].cur_mp: " + str(master_cast[idx].cur_mp) );

        log( "      master_cast["+str(idx)+"].battle_menu_idx: " + str(master_cast[idx].battle_menu_idx) );
        log( "    master_cast["+str(idx)+"].battle_menu_dirty: " + str(master_cast[idx].battle_menu_dirty) );

        log( "" );
        log( "STATS: " );

        for( i=0; i<MAX_STATS; i++ )
        {
            log( GetStatName(i)+": real: "+str(master_cast[idx].stats[i])+"; getStat(): " +str(getStat(idx, i)) );
        }

        log( "" );
        log( "EQUIPMENT: " );

        for( i=0; i<MAX_EQUIP_SLOTS; i++ )
        {
            if( master_cast[idx].equipment[i] < 0 )
            {
                log( GetSlotName(i)+": NOTHING " );
            }
            else
            {
                log( GetSlotName(i)+": "+master_items[master_cast[idx].equipment[i]].name+" (id: "+str(master_cast[idx].equipment[i])+")" );
            }
        }

        log( "" );
        log( "SKILLS (currently has "+str(master_cast[idx].skillcount)+"): " );
        for( i=0; i<master_cast[idx].skillcount; i++ )
        {
            if( master_skills[master_cast[idx].skills[i]].type >= 0 )
                log( master_skills[master_cast[idx].skills[i]].name + " (" +master_skilltypes[master_skills[master_cast[idx].skills[i]].type].name+ ")" );
            else
                log( master_skills[master_cast[idx].skills[i]].name + " (COMMAND)" );
        }

        log( "" );
        Log( "ELEMENTAL and STATUS factors:" );
        Log( "Current condition: '"+master_cast[idx].condition+"'" );
        Log( "         e_immune: '"+master_cast[idx].e_immune+"'" );
        Log( "           e_auto: '"+master_cast[idx].e_auto+"'" );
        Log( "        e_element: '"+master_cast[idx].e_element+"'" );

        for( i=0; i<MAX_RESISTS; i++ )
        {
            Log( "e_resist["+GetResistName(i)+"]: '"+master_cast[idx].e_resist[i]+"'" );
        }

        Log( "         o_immune: '"+master_cast[idx].o_immune+"'" );
        Log( "           o_auto: '"+master_cast[idx].o_auto+"'" );
        Log( "        o_element: '"+master_cast[idx].o_element+"'" );

        for( i=0; i<MAX_RESISTS; i++ )
        {
            Log( "o_resist["+GetResistName(i)+"]: '"+master_cast[idx].o_resist[i]+"'" );
        }
    }

    log( "==============================" );
}


void dump_skills()
{
    int i;

    Log( "dumping skills..." );

    for( i=0; i<MAX_SKILLS; i++ )
    {
        Log(  "master_skills["+str(i)+"]..." );


        Log(  "name: '"+master_skills[i].name+"'" );

        if( master_skills[i].type < 0 )
        {
            Log(  "type: '-1, (COMMAND)'" );
        }
        else
        {
            Log(  "type: '"+master_skilltypes[master_skills[i].type].name+"'" );
        }

        Log(  "targ_func: '"+master_skills[i].target_func+"'" );
        Log(  "efct_func: '"+master_skills[i].effect_func+"'" );
        Log( "" );
        Log(  "       mp_cost: '"+str(master_skills[i].mp_cost)+"'" );
        Log(  "        charge: '"+str(master_skills[i].charge_time)+"'" );
        Log(  "         delay: '"+str(master_skills[i].delay_time)+"'" );
        Log(  "is_reflectable: '"+str(master_skills[i].is_reflectable)+"'" );
        Log(  "   is_nullable: '"+str(master_skills[i].is_nullable)+"'" );
        Log( "" );
        Log(  "    icon: '"+str(master_skills[i].icon)+"'" );
        Log(  "use_flag: '"+str(master_skills[i].use_flag)+"'" );
        Log( "" );
        Log(  "desc: '"+master_skills[i].desc+"'" );
        Log(  "" );
        Log(  "------------------------------" );
        Log(  "" );
    }

    Log( "... done dumping skills." );
}


void dump_skilltypes()
{
    int i;

    Log( "dumping skills..." );

    for( i=0; i<MAX_SKILLTYPES; i++ )
    {
        Log(  "master_skilltypes["+str(i)+"]..." );


        Log(  "name: '"+master_skilltypes[i].name+"'" );
        Log(  "icon: '"+str(master_skilltypes[i].icon)+"'" );
        Log(  "visi: '"+str(master_skilltypes[i].visibility)+"'" );

        Log(  "stat: '"+master_skilltypes[i].disabling_status_ailments+"'" );

        Log(  "desc: '"+master_skilltypes[i].desc+"'" );
        Log(  "" );
        Log(  "------------------------------" );
        Log(  "" );
    }

    Log( "... done dumping skilltypes." );
}
