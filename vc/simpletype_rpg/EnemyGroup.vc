// -------------------------------------------------------------------------------------------------------
// EnemyGroup.vc
// -------------------------------------------------------------------------------------------------------
//  July31/2005, Shamus "Kildorf" Peveril
//
//  Loads the battle group definition file and parses it. See battle_group.dat for interface description.
//  Call InitEnemyGroups() before calling any of the other stuff.
// -------------------------------------------------------------------------------------------------------

string EnemyGroup_Areas;
string EnemyGroup_Master;
string EnemyGroup_CurrentBattle_Master;

string BATTLE_GROUP_FILE = "battle_group.dat";


void _test_eg() {
    log("Testing EnemyGroup.vc");
    log("~~~~~~~~~~~~~~~~~~~~~");
    
    initEnemyGroups();

    log("---");
    log(EnemyGroup_Master);
    log("---");
    log(EnemyGroup_Areas);
    log("---");
    
    log("Initing battle for area: Overworld_A");
    InitBattleSetup("Overworld_A");

    log("getBattleGroupCount()       returns :" + str(GetBattleGroupCount()));
    log("GetBattleGroupEnemy(0)      returns :" + str(GetBattleGroupEnemy(0)));
    log("GetBattleGroupEnemyX(0)     returns :" + str(GetBattleGroupEnemyX(0)));
    log("GetBattleGroupEnemyY(0)     returns :" + str(GetBattleGroupEnemyY(0)));
    log("IsBattleGroupEnemyLeader(0) returns :" + str(IsBattleGroupEnemyLeader(0)));
    log("BattleGroupSetupCallfunc()  returns :" + BattleGroupSetupCallfunc());
    
    exit("");
}


// Initializes the battle group system.
void InitEnemyGroups() {
    // Grab the battle group data file.
    string eg_filedump = FileToString(dat_directory+BATTLE_GROUP_FILE);

    EnemyGroup_Areas = "";
    EnemyGroup_Master = "";
    EnemyGroup_CurrentBattle_Master = "";
    
    // Lots of variables
    int eg_numln = tokenCount(eg_filedump,chr(10));
    int eg_curln_idx = 0;
    int eg_search_idx = 0;
    int eg_search_maxidx = 0;
    int eg_groups_seen = 0;
    int eg_totalchance;
    int eg_curtok;
    string eg_curln;
    string eg_curfield;
    string eg_curarea;
    string eg_curgroup;
    string eg_tempareastring;
    int eg_flag_special = 0;
    int eg_flag_add = -1;
    
    if( !num_enemies )
    {
        FATAL_ERROR(
            "Cannot initialize Enemy Groups before you initialize the Enemies.  "+
            "Please check the order of your inits."
        );
    }
    
    // Step through each line in the file.
    for(eg_curln_idx = 0; eg_curln_idx < eg_numln; eg_curln_idx++) {
        // Get the current line.
        eg_curln = getToken(eg_filedump,chr(10),eg_curln_idx);
        eg_curfield = getToken(eg_curln, ___strip_whitespace_tokens, 0); 
        
        if (equ(left(eg_curfield,2),"//") || equ(left(eg_curfield,1),"#") || equ(eg_curfield,"")) { } // comment
        else if (equ(getToken(eg_curfield,"=-",0),"END")) { // end of a group definition
            EnemyGroup_Master = EnemyGroup_Master + ";";            
            eg_flag_add = -1; // sentinel to check if enemies get added to an undefined group
            eg_groups_seen++;            
        }
        else if (equ(eg_curfield, "Area") || equ(eg_curfield, "Special")) { // beginning of a group definition 
            if (eg_flag_add >= 0) ErrorHandler("InitEnemyGroups(): New area definition begun without ending previous area at line " + str(eg_curln_idx) + " of the battle group definition file.");
            eg_flag_special = equ(eg_curfield, "Special");
            eg_curfield = getToken(eg_curln, ___strip_whitespace_tokens + "/;:", 1); // set to region key
            eg_curgroup = eg_curfield + "/";
            if (!eg_flag_special) {
                eg_curfield = getToken(eg_curln, ___strip_whitespace_tokens + "/;:", 2); // set to encounter chance
                if (equ(eg_curfield,"-") || equ(eg_curfield,"")) eg_curgroup = eg_curgroup + "1/";
                else eg_curgroup = eg_curgroup + str(SafeVal(eg_curfield)) + "/";
            }
            else { eg_curgroup = eg_curgroup + "1/"; } 
            eg_curfield = getToken(eg_curln, ___strip_whitespace_tokens + "/;:", 3); // set to optional callfunc            
            if (equ(eg_curfield,"-") || equ(eg_curfield,"")) eg_curfield = "-";
            eg_curgroup = eg_curgroup + eg_curfield;
            EnemyGroup_Master = EnemyGroup_Master + eg_curfield; // Each EG_Master entry begins with the optional callfunc
            
            // eg_curgroup now contains the header information, verified and separated by /.
            // Now we need to put this group's data together with any other groups of the same key in 
            // EnemyGroup_Areas, If it's a special group or there were no other groups of the same key
            // thus far, we make a new key entry in EnemyGroup_Arrays.
            
            if (eg_flag_special) { // if special, assume that the key is unique
                // If you were going to confirm the uniqueness of Special fight keys, 
                // this would be a good place to do it.
                eg_flag_add = 0;
                EnemyGroup_Areas = EnemyGroup_Areas + getToken(eg_curgroup,"/",0) + "/1/" + str(eg_groups_seen) + ":1;";
                eg_search_maxidx++;
            }
            else {
                eg_flag_add = 1; 
                eg_tempareastring = ""; // We'll rebuild EnemyGroup_Areas in this temporary variable
                for(eg_search_idx = 0; eg_search_idx < eg_search_maxidx; eg_search_idx++) { // for each group key
                    eg_curarea = getToken(EnemyGroup_Areas,";",eg_search_idx);
                    if (eg_flag_add) {
                        if(equ(getToken(eg_curarea,"/",0),getToken(eg_curgroup,"/",0))) { // Is this the same key as that of the group being added?
                            eg_flag_add = 0; // we needn't append a new key, as it's already in there
                            eg_totalchance = val(getToken(eg_curarea,"/",1)) + val(getToken(eg_curgroup,"/",1));
                            eg_curarea = getToken(eg_curgroup,"/",0) + "/" + str(eg_totalchance) + "/" + getToken(eg_curarea,"/",2) + "," + str(eg_groups_seen) + ":" + getToken(eg_curgroup,"/",1);
                        }
                    }
                    eg_tempareastring = eg_tempareastring + eg_curarea + ";";
                }
                if (eg_flag_add) { // This group's key isn't listed yet, so append it to the end.
                    EnemyGroup_Areas = EnemyGroup_Areas + getToken(eg_curgroup,"/",0) + "/" + getToken(eg_curgroup,"/",1) + "/" + str(eg_groups_seen) + ":" + getToken(eg_curgroup,"/",1) + ";";
                    eg_search_maxidx++;
                }
                else EnemyGroup_Areas = eg_tempareastring;
            }
        }
        else { // The line has content, and isn't a group beginning or end. Thus, we'll assume it's an enemy definition line.
            if(eg_flag_add == -1) ErrorHandler("InitEnemyGroups(): Enemy line without an area header at line " + str(eg_curln_idx) + " of the battle group definition file.");
            EnemyGroup_Master = EnemyGroup_Master + "," + str(getEnemy(eg_curfield)); // Right now, eg_curfield holds the name of the enemy to be added
            if (!equ(getToken(eg_curln, ___strip_whitespace_tokens + "/;:", 4),"")) EnemyGroup_Master = EnemyGroup_Master + "!"; // This enemy is a Leader.
            EnemyGroup_Master = EnemyGroup_Master + "/" + str(SafeVal(getToken(eg_curln, ___strip_whitespace_tokens + "/;:", 1))) + "/" + str(SafeVal(getToken(eg_curln, ___strip_whitespace_tokens + "/;:", 2))); // add enemy coordinates to list
        }

    } // end for loop; done reading data file
}


// this function takes a Key.  If the key is to an area, calculate the area's randoms, and choose the 
//   winning "battle group" entry in a global variable, for the rest of these functions to internally use.
// if the key is for a special battle, set the global variable to it's lone index, no need to "roll dice".
// if an invalid key is given, error.
// returns the name of the special function called for the chosen group, if any.
string InitBattleSetup( string ibs_key ) {
    if(!strcmp(EnemyGroup_Master,"") || !strcmp(EnemyGroup_Areas,"")) {
        ErrorHandler("Runtime Error: InitBattleSetup() called without InitEnemyGroups().");
        return "";
    }
           
    int ibs_numareas = tokenCount(EnemyGroup_Areas,";");
    int ibs_totalchance;
    int ibs_rollchance;
    int ibs_curchance;
    int ibs_curgroup_idx;
    int ibs_curarea_idx;
    int ibs_curentry_idx;
    string ibs_curarea; 
    string ibs_curentry;
    string ibs_possgroups;
    string ibs_callfunc;
    
    EnemyGroup_CurrentBattle_Master = "";
        
    for(ibs_curarea_idx = 0; ibs_curarea_idx < ibs_numareas; ibs_curarea_idx++) {
        ibs_curarea = getToken(EnemyGroup_Areas,";",ibs_curarea_idx);
        if(!strcmp(getToken(ibs_curarea,"/",0),ibs_key)) {
            ibs_totalchance = val(getToken(ibs_curarea,"/",1));
            ibs_rollchance = random(1,ibs_totalchance);
            ibs_possgroups = getToken(ibs_curarea,"/",2);
            for(ibs_curentry_idx = 0; ibs_curentry_idx < tokenCount(ibs_possgroups,","); ibs_curentry_idx++) {
                ibs_curentry = getToken(ibs_possgroups,",",ibs_curentry_idx);
                ibs_curgroup_idx = val(getToken(ibs_curentry,":",0));
                ibs_curchance = val(getToken(ibs_curentry,":",1));
                if(ibs_rollchance <= ibs_curchance) {
                    EnemyGroup_CurrentBattle_Master = getToken(EnemyGroup_Master,";",ibs_curgroup_idx);
                    return "";
                }
                ibs_rollchance -= ibs_curchance;
            }
        }
    }
    
    ErrorHandler("Runtime Error: Unrecognized area key passed to InitBattleSetup().");
    
    return "";
}

// returns the number of enemies in the Battle Group set by InitBattleSetup()
int GetBattleGroupCount() {
    if(!strcmp(EnemyGroup_CurrentBattle_Master,"")) {
        ErrorHandler("Runtime Error: GetBattleGroupCount() called without InitBattleSetup().");
        return -1;
    }
    return (tokenCount(EnemyGroup_CurrentBattle_Master,",") - 1);
}

// returns the master_enemy[] index for the Nth enemy in the Battle Group set by InitBattleSetup() 
int GetBattleGroupEnemy( int n ) {
    if(!strcmp(EnemyGroup_CurrentBattle_Master,"")) {
        ErrorHandler("Runtime Error: GetBattleGroupEnemy() called without InitBattleSetup().");
        return -1;
    }
    if(n > tokenCount(EnemyGroup_CurrentBattle_Master,",") - 2 || n < 0) {
        ErrorHandler("Runtime Error: GetBattleGroupEnemy() called with invalid index " + str(n) + ".");
        return -1;
    }
    
    string eg_enemy = getToken(EnemyGroup_CurrentBattle_Master,",",n+1);
    string eg_idx = getToken(eg_enemy,"/",0);

    if(!strcmp(left(eg_idx,1),"!")) {
        return val(right(eg_idx,len(eg_idx)-2));
    } else {
        return val(eg_idx);
    }
}

// returns the x coordinate for the Nth enemy in the Battle Group set by InitBattleSetup() 
int GetBattleGroupEnemyX( int n ) {
    if(!strcmp(EnemyGroup_CurrentBattle_Master,"")) {
        ErrorHandler("Runtime Error: GetBattleGroupEnemyX() called without InitBattleSetup().");
        return -1;
    }
    if(n > tokenCount(EnemyGroup_CurrentBattle_Master,",") - 2 || n < 0) {
        ErrorHandler("Runtime Error: GetBattleGroupEnemyX() called with invalid index " + str(n) + ".");
        return -1;
    }
    
    string eg_enemy = getToken(EnemyGroup_CurrentBattle_Master,",",n+1);
    string eg_x = getToken(eg_enemy,"/",1);
    return val(eg_x);
}

// returns the y coordinate for the Nth enemy in the Battle Group set by InitBattleSetup() 
int GetBattleGroupEnemyY( int n ) {
    if(!strcmp(EnemyGroup_CurrentBattle_Master,"")) {
        ErrorHandler("Runtime Error: GetBattleGroupEnemyY() called without InitBattleSetup().");
        return -1;
    }
    if(n > tokenCount(EnemyGroup_CurrentBattle_Master,",") - 2 || n < 0) {
        ErrorHandler("Runtime Error: GetBattleGroupEnemyY() called with invalid index " + str(n) + ".");
        return -1;
    }
    
    string eg_enemy = getToken(EnemyGroup_CurrentBattle_Master,",",n+1);
    string eg_y = getToken(eg_enemy,"/",2);
    return val(eg_y);
}

// returns true if the 'Leader' flag was set for Nth enemy in the Battle Group set by InitBattleSetup().  Otherwise False.  
// Note, a battle group does not need a leader, and may have multiple leaders.
int IsBattleGroupEnemyLeader( int n ) {
    if(!strcmp(EnemyGroup_CurrentBattle_Master,"")) {
        ErrorHandler("Runtime Error: IsBattleGroupEnemyLeader() called without InitBattleSetup().");
        return -1;
    }
    if(n > tokenCount(EnemyGroup_CurrentBattle_Master,",") - 2 || n < 0) {
        ErrorHandler("Runtime Error: IsBattleGroupEnemyLeader() called with invalid index " + str(n) + ".");
        return -1;
    }
    
    string eg_enemy = getToken(EnemyGroup_CurrentBattle_Master,",",n+1);
    string eg_idx = getToken(eg_enemy,"/",0);
    if(!strcmp(left(eg_idx,1),"!")) {
        return 1;
    } else {
        return 0;
    }
}

//returns the given string for a battle group's optional setup callfunc (just returns "" if there is none)
string BattleGroupSetupCallfunc() {
    if(!strcmp(EnemyGroup_CurrentBattle_Master,"")) {
        ErrorHandler("Runtime Error: BattleGroupSetupCallFunc() called without InitBattleSetup().");
        return "error";
    }
    if(!strcmp(getToken(EnemyGroup_CurrentBattle_Master,",",0),"-")) {
        return "";
    } else {
        return getToken(EnemyGroup_CurrentBattle_Master,",",0);
    }
}

/// dumps a readout of the parsed file.
void dumpBattleGroups()
{
    Log( "dumpBattleGroups()..." );
    Log( "=====================" );
    Log( "=====================" );
    Log( "EnemyGroup_Areas:" );
    Log( EnemyGroup_Areas );
    Log( "" );
    Log( "EnemyGroup_Master:" );
    Log( EnemyGroup_Master );
    Log( "" );
    Log( "EnemyGroup_CurrentBattle_Master:" );
    Log( EnemyGroup_CurrentBattle_Master );
    Log( "" );
    Log( "" );
    Log( "...dumpBattleGroups() done." );
    Log( "=====================" );
    Log( "=====================" );
}
